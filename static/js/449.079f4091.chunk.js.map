{"version":3,"file":"static/js/449.079f4091.chunk.js","mappings":"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","sources":["components/Alert/ReusableAlert.jsx","components/Modal/customModal.jsx","components/ErrorPopup/ErrorPopup.jsx","components/Modals/ContentErrorsModal.jsx","components/Popup/Popup.jsx","pages/plantAssignment/WidgetLifecycle.jsx","pages/plantAssignment/dataHelpers.js","pages/plantAssignment/plantAssignmentToolbarNativeCta.jsx","pages/plantAssignment/DragAndDrop.jsx","services/api/PlantAssignment/createMFGCA.js","pages/plantAssignment/plantAssignment.jsx","pages/plantAssignment/plantIndex.js","services/api/PlantAssignment/saveTableDataService.js"],"sourcesContent":["import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst ReusableAlert = ({\r\n  variant = \"info\",\r\n  message,\r\n  show = true,\r\n  className = \"\",\r\n}) => {\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Alert variant={variant} className={className}>\r\n      {typeof message === \"string\" ? message : message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ReusableAlert;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","import React, { useMemo } from \"react\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"./ErrorPopup.css\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  const processedErrors = useMemo(() => {\r\n    // Group errors by row number\r\n    const errorGroups = errors.reduce((groups, error) => {\r\n      const rowMatch = error.match(/Row (\\d+):/);\r\n      const columnMatch = error.match(/\"([^\"]*)\" (?:is required|value)/);\r\n      const errorMsg = error.split(\": \").slice(1).join(\": \");\r\n\r\n      const rowNumber = rowMatch ? rowMatch[1] : \"N/A\";\r\n      const columnName = columnMatch\r\n        ? columnMatch[1]\r\n        : error.includes(\"Collaborative Space\", \"Quantity\")\r\n        ? \"Collaborative Space\"\r\n        : \"N/A\";\r\n\r\n      if (!groups[rowNumber]) {\r\n        groups[rowNumber] = {\r\n          rowNumber,\r\n          columns: [],\r\n          errors: [],\r\n        };\r\n      }\r\n\r\n      groups[rowNumber].columns.push(columnName);\r\n      groups[rowNumber].errors.push(errorMsg || error);\r\n\r\n      return groups;\r\n    }, {});\r\n\r\n    // Convert groups to array and sort by row number\r\n    return Object.values(errorGroups).sort(\r\n      (a, b) => Number(a.rowNumber) - Number(b.rowNumber)\r\n    );\r\n  }, [errors]);\r\n\r\n  const cache = new CellMeasurerCache({\r\n    fixedWidth: true,\r\n    defaultHeight: 50,\r\n  });\r\n\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const error = processedErrors[index];\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"table-row\">\r\n          <div className=\"table-cell\" style={{ width: \"15%\" }}>\r\n            {error.rowNumber}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"25%\" }}>\r\n            {error.columns.map((column, i) => (\r\n              <div key={i}>{column}</div>\r\n            ))}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"60%\" }}>\r\n            <ul className=\"error-list\">\r\n              {error.errors.map((err, i) => (\r\n                <li key={i}>{err}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"error-popup-container\">\r\n      <ReusableAlert\r\n        variant=\"danger\"\r\n        message={\r\n          <>\r\n            <strong>⚠️ Note:</strong> Below reports show only uploaded\r\n            spreadsheet error rows. To resolve these issues, update the\r\n            spreadsheet and re-import. ({processedErrors.length} errors found)\r\n          </>\r\n        }\r\n        className=\"custom-alert\"\r\n      />\r\n\r\n      <div className=\"table-wrapper\">\r\n        {/* Static Header */}\r\n        <div className=\"static-header\">\r\n          <div className=\"header-cell\" style={{ width: \"15%\" }}>\r\n            Row Number\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"25%\" }}>\r\n            Column Name\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"60%\" }}>\r\n            Error Description\r\n          </div>\r\n        </div>\r\n\r\n        {/* Virtualized Error List */}\r\n        <div className=\"table-container\">\r\n          <AutoSizer>\r\n            {({ height, width }) => (\r\n              <List\r\n                width={width}\r\n                height={height}\r\n                rowCount={processedErrors.length}\r\n                rowHeight={cache.rowHeight}\r\n                deferredMeasurementCache={cache}\r\n                rowRenderer={rowRenderer}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;\r\n","// ContentErrorsModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst ContentErrorsModal = ({ show, onHide, errors }) => {\r\n  console.log(`[ContentErrorsModal.jsx] errors:`, errors);\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Content Errors\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ErrorPopup errors={errors} />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ContentErrorsModal;\r\n","import React, {\r\n  useState,\r\n  useMemo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst AvailablePlant = forwardRef(\r\n  ({ data, columns, addedItem, CAName, state }, ref) => {\r\n    const { showWarningToast } = useToast();\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n      setRowSelection({}); // Reset selection when data changes\r\n    }, [data]);\r\n\r\n    const addPlant = () => {\r\n      const selectedRows = table.getSelectedRowModel().rows;\r\n      const selectedItems = selectedRows.map(\r\n        (item) => item.original[\"Available Plant\"]\r\n      );\r\n\r\n      if (selectedItems.length === 0) {\r\n        showWarningToast(MSG_EMPTYADD_ERROR);\r\n        return;\r\n      }\r\n\r\n      addedItem(selectedItems); // Send selected items to parent\r\n      setRowSelection({}); // Reset selection\r\n    };\r\n\r\n    // Expose the addPlant function to parent\r\n    useImperativeHandle(ref, () => ({\r\n      addPlant,\r\n    }));\r\n\r\n    const enhancedColumns = useMemo(() => {\r\n      const selectionColumn = {\r\n        id: \"select\",\r\n        cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={row.getIsSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        ),\r\n      };\r\n      return [selectionColumn, ...columns];\r\n    }, [columns]);\r\n\r\n    const table = useReactTable({\r\n      data,\r\n      columns: enhancedColumns,\r\n      state: { rowSelection },\r\n      enableRowSelection: true,\r\n      onRowSelectionChange: setRowSelection,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary me-3\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(true));\r\n            }}\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(false));\r\n            }}\r\n          >\r\n            Deselect All\r\n          </button>\r\n        </div>\r\n\r\n        {table.getRowModel().rows.length > 0 ? (\r\n          <div className=\"overflow-auto\" style={{ maxHeight: \"60vh\" }}>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <div\r\n                key={row.id}\r\n                className=\"p-3 border-bottom d-flex align-items-center\"\r\n                style={{\r\n                  backgroundColor: row.getIsSelected() ? \"#d5e8f2\" : \"inherit\",\r\n                }}\r\n              >\r\n                <div className=\"me-3\">\r\n                  {flexRender(\r\n                    row.getVisibleCells()[0].column.columnDef.cell,\r\n                    row.getVisibleCells()[0].getContext()\r\n                  )}\r\n                </div>\r\n                <div>{row.original[columns[0].accessorKey]}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-muted p-3\">No data available</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AvailablePlant;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader/> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\n\r\nexport const PlantRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n}) => {\r\n  console.log(\"PlantRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n            color: plant.color || \"black\", // Apply red or green based on color property\r\n            fontWeight: \"bold\", // Optional: Make it more visible\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {isRemoveMode && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"4px\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (tableData, type) => {\r\n  if (!tableData) return [];\r\n\r\n  return tableData.map((data) => {\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        ItemName: data?.ItemTitle || \"N/A\",\r\n        Plant: data?.ItemPlants || [], // ✅ Ensure Plant data is correctly stored\r\n        ItemId: data?.ItemId || \"N/A\", // ✅ Added to be accessible in `tableColumns`\r\n      };\r\n    } else {\r\n      return {\r\n        Plant: data?.title || \"N/A\",\r\n        Seq: data?.Seq || \"1\",\r\n        Status: \"Current\" || \"N/A\",\r\n        \"MFG Change\": data?.MFGChange || \"N/A\",\r\n        \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n        Change: data?.Change || \"N/A\",\r\n        \"Change Status\": data?.ChangeStatus || \"N/A\",\r\n        \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n        \"ERP Status\": \"Active\" || \"N/A\",\r\n        \"ERP Export\": \"Yes\" || \"N/A\",\r\n        \"Lead Plant\": false,\r\n        MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n        \"Sort Value\": \"\",\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName, type, isRemoveMode, handleRemovePlant) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"ItemName\", header: \"Item Name\" },\r\n      {\r\n        accessorKey: \"Plant\",\r\n        header: \"Plant\",\r\n        cell: ({ row }) => (\r\n          <PlantRenderer\r\n            plants={row.original.Plant} // ✅ Uses correct row data\r\n            itemId={row.original.ItemId} // ✅ Passes item ID\r\n            isRemoveMode={isRemoveMode}\r\n            handleRemovePlant={handleRemovePlant}\r\n          />\r\n        ),\r\n      },\r\n    ];\r\n  }\r\n\r\n  return [\r\n    { accessorKey: \"Plant\", header: \"Plant\" },\r\n    { accessorKey: \"Seq\", header: \"Seq\" },\r\n    {\r\n      accessorKey: \"MBom\",\r\n      header: \"MBom\",\r\n      cell: ({ row, getValue, table }) => {\r\n        const handleDropdownChange = (e) => {\r\n          if (!CAName) return; // Prevent changes when disabled\r\n          const updatedValue = e.target.value;\r\n\r\n          // Update the table data state here\r\n          const updatedData = table\r\n            .getRowModel()\r\n            .rows.map((r) =>\r\n              r.id === row.id\r\n                ? { ...r.original, MBom: updatedValue }\r\n                : r.original\r\n            );\r\n\r\n          table.options.meta?.updateTableData(updatedData); // Call custom table update function\r\n        };\r\n\r\n        return (\r\n          <select\r\n            value={getValue()}\r\n            onChange={handleDropdownChange}\r\n            disabled={!CAName} // Disable dropdown if CAName is false\r\n            className={`appearance-none bg-transparent border-none cursor-pointer focus:outline-none`}\r\n            style={{\r\n              ...(CAName === false && { appearance: \"none\" }), // Apply appearance: none only if CAName is false\r\n              width: \"70%\",\r\n              padding: \"5px\",\r\n              fontSize: \"14px\",\r\n              color: \"#333\",\r\n              background: \"none\",\r\n              border: \"none\",\r\n              textAlign: \"left\",\r\n            }}\r\n            onMouseOver={(e) => {\r\n              if (CAName) e.target.style.border = \"1px solid #ccc\";\r\n            }}\r\n            onMouseOut={(e) => {\r\n              if (CAName) e.target.style.border = \"none\";\r\n            }}\r\n          >\r\n            <option value=\"Make\">Make</option>\r\n            <option value=\"Buy\">Buy</option>\r\n          </select>\r\n        );\r\n      },\r\n    },\r\n    { accessorKey: \"Status\", header: \"Status\" },\r\n    { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n    { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n    { accessorKey: \"Change\", header: \"Change\" },\r\n    { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n    { accessorKey: \"Oracle Template\", header: \"Oracle Template\" },\r\n    { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n    { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n    { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n    { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  ];\r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport AvailablePlant from \"../../components/Popup/Popup\";\r\nimport { useRef } from \"react\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\n\r\nconst PlantAssignmentToolbarNativeCta = ({\r\n  onAddPlant,\r\n  addedPlant,\r\n  onSave,\r\n  onRemove,\r\n  uniquedata,\r\n  uniqueColumn,\r\n  CAName,\r\n  state,\r\n  type,\r\n  isMFGCA,\r\n}) => {\r\n  const { showWarningToast } = useToast();\r\n  const [addPlantPopup, setAddPlantPopup] = useState(false);\r\n  console.log(\"addPlantPopup\", addPlantPopup ,setAddPlantPopup);\r\n  const availablePlantRef = useRef();\r\n\r\n  const handleSaveClick = () => {\r\n    if (onSave && (type === \"Change Action\" || CAName)) {\r\n      onSave();\r\n    } else if (state === \"RELEASED\") {\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (onRemove) {\r\n      onRemove();\r\n    }\r\n  };\r\n\r\n  console.log(\"[Unique Table Data]:\", uniquedata);\r\n\r\n  const handleData = (data) => {\r\n    console.log(data);\r\n    if (type === \"Change Action\") {\r\n      if (data.length > 0) {\r\n        onAddPlant(data);\r\n        addedPlant(data);\r\n      }\r\n    } else {\r\n      if (data.length > 0) {\r\n        const newItems = data.map((title) => ({\r\n          title: title, // Use the title as Plant (or replace with actual data)\r\n          Seq: \"1\",\r\n          Status: \"Current\",\r\n          \"MFG Change\": \"N/A\",\r\n          \"MFG Status\": \"N/A\",\r\n          Change: \"N/A\",\r\n          \"Change Status\": \"N/A\",\r\n          \"Oracle Template\": \"N/A\",\r\n          \"ERP Status\": \"Active\",\r\n          \"ERP Export\": \"Yes\",\r\n          \"Lead Plant\": \"false\",\r\n          MBom: \"Buy\",\r\n          \"Sort Value\": \"\",\r\n        }));\r\n        onAddPlant(newItems);\r\n\r\n        addedPlant(data);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex cta-absolute\">\r\n        {!isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (type === \"Change Action\") {\r\n                setAddPlantPopup(true);\r\n              } else if (CAName) {\r\n                setAddPlantPopup(true); // Open the modal if CAName is present\r\n              } else if (state === \"RELEASED\") {\r\n                showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR); // Show warning if state is RELEASED\r\n              } else {\r\n                showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR); // Show warning if CAName is missing\r\n              }\r\n            }}\r\n          >\r\n            Add Plant\r\n          </button>\r\n        )}\r\n        {isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              setAddPlantPopup(true);\r\n            }}\r\n          >\r\n            Add/Update Plants\r\n          </button>\r\n        )}\r\n        <button\r\n          className=\"btn btn-outline-success btn-lg m-2\"\r\n          onClick={handleSaveClick}\r\n        >\r\n          Save\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-danger btn-lg m-2\"\r\n          onClick={handleRemove}\r\n        >\r\n          Remove\r\n        </button>\r\n        \r\n      </div>\r\n\r\n      \r\n\r\n      <CustomModal\r\n        show={addPlantPopup}\r\n        onHide={() => setAddPlantPopup(false)}\r\n        title=\"Available Plant\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Add\",\r\n            variant: \"primary\",\r\n            onClick: () => {\r\n              availablePlantRef.current?.addPlant(); // Call addPlant\r\n              setAddPlantPopup(false);\r\n            },\r\n          },\r\n          {\r\n            label: \"Close\",\r\n            variant: \"danger\",\r\n            onClick: () => setAddPlantPopup(false),\r\n          },\r\n        ]}\r\n      >\r\n        <div className=\"modal-body\">\r\n          <AvailablePlant\r\n            ref={availablePlantRef} // Attach the ref\r\n            data={uniquedata} // if isMFGCA is true, pass uniquedata; else, pass empty array\r\n            columns={uniqueColumn}\r\n            CAName={CAName}\r\n            addedItem={handleData}\r\n            state={state}\r\n          />\r\n        </div>\r\n      </CustomModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignmentToolbarNativeCta;\r\n","import React, { useEffect } from \"react\";\r\nimport \"../../components/DragAndDrop/DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../../components/SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropComponent = () => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      console.log(\"Selected objects:\", selectedObjects);\r\n      console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"droppable-container mt-4\">\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import * as XLSX from \"xlsx\";\r\nimport { getAllPlants } from \"./allPlantSevice\";\r\nimport { fetchCsrfToken } from \"./fetchCsrfService\";\r\nimport axios from \"axios\";\r\n\r\n// Import useToastWithProgress\r\n\r\n// const { showSuccessToastWithProgress, showErrorToastWithProgress } = useToastWithProgress();\r\n\r\n\r\nconst fetchData = async (\r\n  url,\r\n  body = null,\r\n  method = \"GET\"\r\n  // headers = {}\r\n) => {\r\n  console.log(\"Fetching URL:\", url);\r\n  console.log(\"Method is:\");\r\n  console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n\r\n  try {\r\n    const response = await axios({\r\n      url,\r\n      method,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      data: body, // Include body only if provided\r\n    });\r\n\r\n    console.log(\"Response received:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Request failed:\", error);\r\n    throw error; // Propagate the error to the caller\r\n  }\r\n};\r\n// Function to create the manufacturing CA body from Excel data and allPlants\r\nexport const createManufacturingCABody = async (\r\n  excelData,\r\n  allPlantsData,\r\n  companyName,\r\n  collabSpace\r\n) => {\r\n  const items = [];\r\n  const uniquePlantTitles = new Set();\r\n\r\n  for (let i = 1; i < excelData.length; i++) {\r\n    const row = excelData[i];\r\n    if (row.length >= 2 && row[0] && row[1]) {\r\n      const itemName = row[0].toString().trim();\r\n      const plantsList = row[1].toString().includes(\",\")\r\n        ? row[1]\r\n            .toString()\r\n            .split(\",\")\r\n            .map((p) => p.trim())\r\n        : [row[1].toString().trim()];\r\n      items.push({\r\n        name: itemName,\r\n        plants: plantsList,\r\n      });\r\n      plantsList.forEach((plant) => uniquePlantTitles.add(plant));\r\n    }\r\n  }\r\n\r\n  const parentPlants = [];\r\n  uniquePlantTitles.forEach((plantTitle) => {\r\n    const matchedPlant = allPlantsData.find((plant) => {\r\n      const normalizedTitle = plant.title.replace(/^Plant\\s+/, \"\");\r\n      return normalizedTitle === plantTitle || plant.title === plantTitle;\r\n    });\r\n    if (matchedPlant) {\r\n      parentPlants.push({\r\n        PlantName: matchedPlant.title.replace(/^Plant\\s+/, \"\"),\r\n        PlantID: matchedPlant.id,\r\n      });\r\n    }\r\n  });\r\n\r\n  return {\r\n    CATitle: \"FromAutomation\",\r\n    CAOrganization: companyName, // company name credentials\r\n    CACollabSpace: collabSpace, // from credentials\r\n    CAOwner: \"e1331143\", \r\n    Items: items,\r\n    ParentPlants: parentPlants,\r\n  };\r\n};\r\n\r\n// Function to make the API call\r\nexport const callManufacturingCAApi = async (body) => {\r\n  const manufacturingCAUrl =\r\n    \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/flowDownCA/createMFGCA\";\r\n\r\n // console.log(\"Headers for Manufacturing CA API:\", CAHeaders);\r\n\r\n  const response = await fetchData(\r\n    manufacturingCAUrl,\r\n    body,\r\n    \"POST\"\r\n  );\r\n  console.log(\"Manufacturing CA Response:\", JSON.stringify(response));\r\n  return response;\r\n};\r\n\r\n// Function to handle file change (only validation)\r\nexport const handleFileChange = async (\r\n  event,\r\n  setValidationErrors,\r\n  setShowErrorsModal,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n  setValidatedData, // New parameter to store validated data\r\n  setSelectedFiles,\r\n  setIsCreateButtonDisabled\r\n) => {\r\n  \r\n  console.log(\"[handleFileChange] Function triggered\");\r\n\r\n  const files = event.target.files;\r\n  const validExtensions = [\r\n    \"application/vnd.ms-excel\",\r\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n  ]; // MIME types for .xls and .xlsx\r\n\r\n  // Check if all files are valid Excel files\r\n  const invalidFiles = Array.from(files).filter(\r\n    (file) =>\r\n      !validExtensions.includes(file.type) &&\r\n      !file.name.toLowerCase().endsWith(\".xls\") &&\r\n      !file.name.toLowerCase().endsWith(\".xlsx\")\r\n  );\r\n\r\n  if (invalidFiles.length > 0) {\r\n    showErrorToast(\"Only Excel files (.xls, .xlsx) can be uploaded\");\r\n    event.target.value = \"\"; // Reset the file input\r\n    setIsCreateButtonDisabled(true); // Disable the button if invalid files are present\r\n    return;\r\n  }\r\n\r\n  const file = files[0];\r\n  const reader = new FileReader();\r\n\r\n  reader.onload = async (e) => {\r\n    const data = new Uint8Array(e.target.result);\r\n    const workbook = XLSX.read(data, { type: \"array\" });\r\n    const sheetName = workbook.SheetNames[0];\r\n    const sheet = workbook.Sheets[sheetName];\r\n    const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1 }); // Get data as a 2D array\r\n\r\n    console.log(\"Parsed Excel Data:\", jsonData);\r\n\r\n    // Validation: Check if the file is empty\r\n    if (jsonData.length === 0) {\r\n      showErrorToast(\"File is empty\");\r\n      setIsCreateButtonDisabled(true);\r\n      return;\r\n    }\r\n\r\n    \r\n\r\n    // Validation: Check if headers match \"Item\" and \"Plants\"\r\n    const normalizedHeaders = jsonData[0].map((header) =>\r\n      header?.toString().trim().toLowerCase()\r\n    ); // Normalize headers\r\n    console.log(\"Normalized Headers:\", normalizedHeaders);\r\n\r\n    if (normalizedHeaders[0] !== \"item\" || normalizedHeaders[1] !== \"plants\") {\r\n      showErrorToast(\r\n        \"File headers are incorrect. Expected headers: 'Item' and 'Plants'\"\r\n      );\r\n      setIsCreateButtonDisabled(true);\r\n      return;\r\n    }\r\n\r\n    // Validation: Check if the file contains only headers and no data\r\n    if (jsonData.length === 1) {\r\n      showErrorToast(\"No data present in the file. Only headers are present.\");\r\n      return;\r\n    }\r\n\r\n    const errors = [];\r\n    for (let i = 1; i < jsonData.length; i++) {\r\n      const row = jsonData[i];\r\n      const item = row[0];\r\n      const plants = row[1];\r\n\r\n      if (!item && plants) {\r\n        errors.push({\r\n          rowNumber: i + 1,\r\n          columnName: \"Item\",\r\n          errorDescription: \"Items can't be empty\",\r\n        });\r\n      }\r\n\r\n      if (item && !plants) {\r\n        errors.push({\r\n          rowNumber: i + 1,\r\n          columnName: \"Plants\",\r\n          errorDescription: \"Plants value is missing\",\r\n        });\r\n      }\r\n    }\r\n\r\n    console.log(\"Validation Errors:\", errors);\r\n\r\n    if (errors.length > 0) {\r\n      const formattedErrors = errors.map(\r\n        (error) =>\r\n          `Row ${error.rowNumber}: \"${error.columnName}\" value ${error.errorDescription}`\r\n      );\r\n\r\n      console.log(\"[createMFGCA.js] Formatted Errors:\", formattedErrors);\r\n\r\n      setValidationErrors(formattedErrors);\r\n      setShowErrorsModal(true);\r\n      setIsCreateButtonDisabled(true);\r\n    } else {\r\n      showSuccessToast(\"File uploaded successfully with no errors\");\r\n      setValidatedData(jsonData); // Store validated data for further processing\r\n      setSelectedFiles(file);// Update selectedFiles state only after successful validation\r\n      setIsCreateButtonDisabled(false);\r\n    }\r\n  };\r\n\r\n  reader.onerror = () => {\r\n    showErrorToast(\"Failed to read the file. Please try again.\");\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n\r\n  reader.readAsArrayBuffer(file);\r\n};\r\n\r\n// New function to process Manufacturing CA\r\nexport const processManufacturingCA = async (\r\n  validatedData,\r\n  showSuccessToastWithProgress,\r\n  showErrorToastWithProgress\r\n) => {\r\n  try {\r\n\r\n    const csrfTokenHeaders = await fetchCsrfToken();\r\n    const CAHeaders = {\r\n      \"Content-Type\": \"application/json\",\r\n      ...csrfTokenHeaders\r\n    };\r\n    let credentials = window.widget.getValue(\"Credentials\");\r\n    console.log(\"credentials createMFGCA\", credentials);\r\n    const credentialsParts = credentials.split(\".\");\r\n    console.log(\"credentialsParts\", credentialsParts);\r\n    const companyName = credentialsParts[1]; // Value after the first dot\r\n    console.log(\"Company Name:\", companyName);\r\n    const collabSpace = credentialsParts[2]; // Value after the second dot\r\n\r\n    console.log(\"Collab Space:\", collabSpace);\r\n\r\n    const allPlantsData = await getAllPlants([collabSpace], CAHeaders, \"\");\r\n    console.log(\"Fetched allPlantsData:\", allPlantsData);\r\n\r\n    const manufacturingCABody = await createManufacturingCABody(\r\n      validatedData,\r\n      allPlantsData,\r\n      companyName,\r\n      collabSpace\r\n    );\r\n    console.log(\r\n      \"[processManufacturingCA] Manufacturing CA Body (JSON):\",\r\n      JSON.stringify(manufacturingCABody, null, 2)\r\n    );\r\n\r\n    // Pass headers to callManufacturingCAApi\r\n    const response = await callManufacturingCAApi(\r\n      manufacturingCABody\r\n    );\r\n    console.log(\"[processManufacturingCA] Manufacturing CA API Response:\", response);\r\n\r\n    // Extract CAName from the response\r\n    const CAName = response?.CAName ;\r\n    showSuccessToastWithProgress(`Manufacturing CA created successfully! Name: ${CAName}`);\r\n    \r\n    // showSuccessToast(\"Manufacturing CA created successfully!\");\r\n  } catch (error) {\r\n    console.error(\"Error in processManufacturingCA:\", error);\r\n    showErrorToastWithProgress(\"Failed to create Manufacturing CA. Please try again.\");\r\n  }\r\n};","import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n  useRef,\r\n} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport \"./plantAssignment.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport {\r\n  setCAItemDetails,\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns,\r\n} from \"./dataHelpers\";\r\nimport useToast, { useToastWithProgress } from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport { handleAddData, handleRemoveData, saveData } from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport PlantAssignmentToolbarNativeCta from \"./plantAssignmentToolbarNativeCta\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport DragAndDropComponent from \"./DragAndDrop\";\r\nimport * as XLSX from \"xlsx\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport { getAllPlants } from \"../../services/api/PlantAssignment/allPlantSevice\";\r\nimport axios from \"axios\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport {\r\n  handleFileChange,\r\n  processManufacturingCA,\r\n} from \"../../services/api/PlantAssignment/createMFGCA\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\"; // This is the reset-style icon\r\nimport { fetchData } from \"../../utils/helpers\";\r\n\r\nconst PlantAssignment = () => {\r\n  const { showSuccessToastWithProgress, showErrorToastWithProgress } =\r\n    useToastWithProgress();\r\n  const [validatedData, setValidatedData] = useState(null);\r\n  const [showErrorsModal, setShowErrorsModal] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState([]); // State to store validation errors\r\n  const { initializeDroppableArea, loading } = usePlantDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [assignedPlant, setAssignedPlant] = useState([]);\r\n  const [selectedFiles, setSelectedFiles] = useState(null);\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  const [CAItemDetailsTable, setCAItemDetailsTable] = useState([]);\r\n  const [isFileInputDisabled, setIsFileInputDisabled] = useState(false); // New state to disable file input\r\n  const [isCreateButtonDisabled, setIsCreateButtonDisabled] = useState(true); // New state to control button enablement\r\n  \r\n  // const [addedItem, setAddedItem] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [isRemoveMode, setIsRemoveMode] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  let securityContext1 = window.widget.getValue(\"Credentials\");\r\n  console.log(\"Security context is: \", securityContext1);\r\n\r\n  const fileInputRef = useRef(null); // Create a ref for the file input\r\n\r\n  const handleFileInputChange = (event) => {\r\n    handleFileChange(\r\n      event,\r\n      setValidationErrors,\r\n      setShowErrorsModal,\r\n      showErrorToast, // Pass toast functions\r\n      showSuccessToast,\r\n      setValidatedData,\r\n      setSelectedFiles,\r\n      setIsCreateButtonDisabled\r\n    ).finally(() => {\r\n      setScreenLoader(false); // Hide loader after validation is complete\r\n    });\r\n    setIsFileInputDisabled(true);\r\n   // setIsCreateButtonDisabled(false); // Enable the \"Create Manufacturing CA\" button\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"OnSave is Called with the TableData\", tableData);\r\n    // Pass the current tableData to the onSave function\r\n    extractPlantData(tableData);\r\n    setScreenLoader(true);\r\n\r\n    if (type === \"Change Action\") {\r\n      if (isMFGCA === true) {\r\n        console.log(\"Manufacturing CA Save Called\");\r\n        const response = await getSaveDataForManufacturingCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      } else {\r\n        console.log(\"Engineering CA Save Called\");\r\n      }\r\n    } else {\r\n      await onSave(tableData); // Pass tableData when calling onSave\r\n    }\r\n  };\r\n  const handleRemove = async () => {\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Remove is clicked for Chnage Action\");\r\n      setIsRemoveMode(true); // Keeps remove mode active\r\n    } else {\r\n      console.log(\"Selected Table Rows:\", selectedTableRows);\r\n      console.log(\"handleRemove is Called with the TableData\", tableData);\r\n\r\n      if (selectedTableRows.length > 0) {\r\n        // Extract IDs or titles of selected rows\r\n        const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n        console.log(\"Selected Titles:\", selectedTitles);\r\n        const removedTitles = selectedTitles.map((title) => ({\r\n          title: title,\r\n        }));\r\n        console.log(\"Removed Titles:\", removedTitles);\r\n        const updatedTableData = tableData.filter(\r\n          (row) => !selectedTitles.includes(row.Plant)\r\n        );\r\n        console.log(\"updateTableData\", updateTableData);\r\n        if (updateTableData) {\r\n          setTableData(updatedTableData);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n        }\r\n\r\n        // // Update state\r\n\r\n        setUniqueData((prevUniquePlants) => [\r\n          ...prevUniquePlants,\r\n          ...removedTitles,\r\n        ]); // Add removed items back to uniqueData\r\n        //added by ayush\r\n        await handleRemoveData( allPlants, removedTitles,droppedObjectData.initialDraggedData?.data?.items[0].objectId,type);\r\n      } else {\r\n        alert(\"Please select at least one row to remove.\");\r\n      }\r\n\r\n      \r\n    }\r\n  };\r\n\r\n  // NEED TO WORK HERE FOR THE UNIQUE PLANTS FOR CA\r\n\r\n  const handleRemovePlant = useCallback(\r\n    (itemId, plantId) => {\r\n      setCAItemDetailsTable((tableData) =>\r\n        tableData.map((item) =>\r\n          item.ItemId === itemId\r\n            ? {\r\n                ...item,\r\n                ItemPlants: item.ItemPlants.filter(\r\n                  (plant) => plant.PlantID !== plantId\r\n                ),\r\n              }\r\n            : item\r\n        )\r\n      );\r\n    },\r\n    [setCAItemDetailsTable]\r\n  );\r\n  const handleAdded = async (data) => {\r\n    console.log(\"Data Received\", data);\r\n    console.log(\"[Plant Assignment] Table data\", tableData);\r\n    console.log(\"Added Data from Toolbar\", data);\r\n    console.log(\"CA Table data is\", CAItemDetails);\r\n\r\n    \r\n\r\n    setTableKey((prevKey) => prevKey + 1); // Update table key\r\n\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Change Action Plant is Added\");\r\n\r\n      setCAItemDetailsTable((prev) => {\r\n        return prev.map((row) => {\r\n          const shouldUpdate =\r\n            selectedTableRows.length === 0 ||\r\n            selectedTableRows.some((r) => r.ItemId === row.ItemId);\r\n\r\n          if (!shouldUpdate) return row;\r\n\r\n          const reduxRow = CAItemDetails.find((r) => r.ItemId === row.ItemId);\r\n          const reduxPlants = reduxRow?.ItemPlants || [];\r\n          const existingPlants = row.ItemPlants || [];\r\n\r\n          const updatedExistingPlants = existingPlants.map((ep) => {\r\n            const shouldUpdateColor =\r\n              isMFGCA &&\r\n              data.includes(ep.PlantName.trim()) &&\r\n              reduxPlants.some(\r\n                (rp) => rp.PlantName.trim() === ep.PlantName.trim()\r\n              );\r\n\r\n            return shouldUpdateColor ? { ...ep, color: \"red\" } : ep;\r\n          });\r\n\r\n          const newPlantsToAdd = [];\r\n\r\n          data.forEach((plantName) => {\r\n            const matchedPlant = CAAllPlants.find((plant) => {\r\n              const formattedTitle = plant.title\r\n                .replace(/^Plant\\s+/, \"\")\r\n                .trim();\r\n              return formattedTitle === plantName.trim();\r\n            });\r\n\r\n            if (!matchedPlant) return;\r\n\r\n            const existsInRedux = reduxPlants.some(\r\n              (rp) => rp.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            const existsInTable = existingPlants.some(\r\n              (ep) => ep.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            if (!existsInTable) {\r\n              newPlantsToAdd.push({\r\n                PlantName: plantName,\r\n                PlantID: matchedPlant.id,\r\n                ...(isMFGCA && { color: existsInRedux ? \"red\" : \"green\" }),\r\n              });\r\n            }\r\n          });\r\n\r\n          return {\r\n            ...row,\r\n            ItemPlants: [...updatedExistingPlants, ...newPlantsToAdd],\r\n          };\r\n        });\r\n      });\r\n    } else {\r\n      setTableData((prev) => [\r\n        ...data.map(({ title, ...rest }) => ({ Plant: title, ...rest })),\r\n        ...prev,\r\n      ]);\r\n      //added by ayush\r\n      await handleAddData(data, allPlants, droppedObjectData.initialDraggedData?.data?.items[0].objectId, type, proposedChanges, productChildren);\r\n    }\r\n  };\r\n\r\n  const handleUnique = (data) => {\r\n    console.log(\"The data received from Child is:\", data);\r\n    const updatedTableData = uniqueTableData.filter(\r\n      (row) =>\r\n        !data.find((selectedRow) => selectedRow === row[\"Available Plant\"])\r\n    );\r\n    console.log(\"Updated Table Data after unique:\", updatedTableData);\r\n    if (updatedTableData) {\r\n      const transformedData = updatedTableData.map((item) => ({\r\n        title: item[\"Available Plant\"],\r\n      }));\r\n\r\n      console.log(transformedData);\r\n      setUniqueData(transformedData);\r\n    }\r\n  };\r\n\r\n  // Add this function near the top of the file\r\n  const extractPlantData = (tableData) => {\r\n    const plantData = tableData.map((row) => ({\r\n      itemName: row.ItemName, // Replace with the actual key for Item Name\r\n      plantName: row.Plant, // Replace with the actual key for Plant Name\r\n    }));\r\n    console.log(\"Extracted Plant Data:\", plantData);\r\n    return plantData;\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  // Getting the CA dETAILS FROM rEDUX\r\n\r\n  const CAItemDetails = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAItemDetails\r\n  );\r\n  console.log(\"The CA Item Details are:\", CAItemDetails);\r\n\r\n  const CAAllPlants = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAallPlants\r\n  );\r\n  console.log(\"For CA all Plants are: \", CAAllPlants);\r\n  const CAHeaders = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAheaders\r\n  );\r\n  console.log(\"caheaders plant assign\", CAHeaders);\r\n\r\n  const isMFGCA = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAisMFGCA\r\n  );\r\n  console.log(\"isMFGCA value is:\", isMFGCA);\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const allPlants = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.allPlants\r\n  );\r\n  console.log(\"[PlantAssignment] plant object data: \", allPlants);\r\n\r\n  // const handleFileInputChange = (event) => {\r\n  //   handleFileChange(event, allPlants, CAHeaders, setValidationErrors, setShowErrorsModal);\r\n  // };\r\n\r\n  const uniquePlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.uniquePlants\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Plants:\", uniquePlant);\r\n\r\n  const asignedPlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.initialAssignedPlants\r\n  );\r\n  console.log(\"The Assigned Plants are:\", asignedPlant);\r\n  const productChildren = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.productChildren\r\n  );\r\n  console.log(\"[Plant Assignment] Product Children:\", productChildren);\r\n  const CAName = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAName\r\n  );\r\n  console.log(\"[plant Assignment] CAName:\", CAName);\r\n\r\n  const headers = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.headers\r\n  );\r\n  console.log(\"[Plant Assignment] Headers are: \", headers);\r\n\r\n  const getUniquePlant = useCallback(() => {\r\n    let allPlants = CAAllPlants.map((item) =>\r\n      item.title.replace(/^Plant /, \"\")\r\n    );\r\n\r\n    const sourceData =\r\n      selectedTableRows.length === 0 ? tableData : selectedTableRows;\r\n\r\n    let assignedTablePlants = [\r\n      ...new Set(\r\n        sourceData.flatMap((item) => item.Plant?.map((p) => p.PlantName) || [])\r\n      ),\r\n    ];\r\n\r\n    let uniqueTablePlants = allPlants\r\n      .filter((plant) => !assignedTablePlants.includes(plant))\r\n      .map((plant) => ({ title: plant }));\r\n\r\n    console.log(\"Unique table plants are :\", uniqueTablePlants);\r\n\r\n    // Return allPlants if isMFGCA is true, else return uniqueTablePlants\r\n    return isMFGCA\r\n      ? allPlants.map((plant) => ({ title: plant }))\r\n      : uniqueTablePlants;\r\n  }, [CAAllPlants, tableData, selectedTableRows, isMFGCA]); // Added isMFGCA as a dependency\r\n\r\n  // Updated: Function to update table data when dropdown changes\r\n  const updateTableData = (updatedData) => {\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  console.log(\"Tanble Data is:\", tableData);\r\n  // Trigger re-render of ReusableTable by changing the key\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  const [dupInitialAssignedClasses, setDupInitialAssignedClasses] =\r\n    useState(asignedPlant);\r\n  console.log(\r\n    \"Duplicate Initial Assigned Classes are:\",\r\n    dupInitialAssignedClasses\r\n  );\r\n  useEffect(() => {\r\n    setDupInitialAssignedClasses(asignedPlant);\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable(CAItemDetails);\r\n    } else {\r\n      setAssignedPlant(asignedPlant);\r\n    }\r\n  }, [asignedPlant, type, CAItemDetails]);\r\n  // Runs only when type === \"Change Action\"\r\n  useEffect(() => {\r\n    if (type === \"Change Action\") {\r\n      setUniqueData(getUniquePlant());\r\n    }\r\n  }, [getUniquePlant, type]);\r\n\r\n  // Runs only when type !== \"Change Action\"\r\n  useEffect(() => {\r\n    if (type !== \"Change Action\") {\r\n      setUniqueData(uniquePlant);\r\n    }\r\n  }, [uniquePlant, type]);\r\n  const onSave = async (tableData) => {\r\n    let updatedItems = {};\r\n    // let DupInitialAssignedClasses = [...asignedPlant]; // Clone the initial array to avoid direct mutation\r\n    const classesToBeClassified = [];\r\n\r\n    console.log(\"Table Data\", tableData);\r\n    console.log(\"Before DupInitialAssignedClasses:\", dupInitialAssignedClasses);\r\n    let finalArray = [];\r\n    // Create a new array with updated classes instead of mutating\r\n    let updatedAssignedClasses = dupInitialAssignedClasses.map((intclass) => {\r\n      let updatedClass = { ...intclass }; // Shallow clone to avoid modifying the original object\r\n\r\n      tableData.forEach((tableItem) => {\r\n        let finalObj = {};\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (updatedClass.title === tableItem.Plant) {\r\n          const MBOMValue = updatedClass.MBOM ? \"Make\" : \"Buy\";\r\n\r\n          // Update only if MBOMValue has changed\r\n          if (MBOMValue !== tableItem.MBom) {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            }\r\n            updatedClass.MBOM = tableItem.MBom === \"Make\"; // Modify the cloned object\r\n            finalObj = {\r\n              ...finalObj,\r\n              id: classid,\r\n              title: tableItem.Plant,\r\n              Type: \"Update\",\r\n            };\r\n            finalArray.push(finalObj);\r\n          }\r\n        }\r\n      });\r\n      return updatedClass; // Return updated or unchanged class object\r\n    });\r\n\r\n    // Find additional rows to classify\r\n    tableData.forEach((tableItem) => {\r\n      const matchedClass = dupInitialAssignedClasses.find(\r\n        (initialClass) => initialClass.title === tableItem.Plant\r\n      );\r\n\r\n      if (!matchedClass) {\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (classid) {\r\n          let classObject = { id: classid, title: tableItem.Plant };\r\n          let finalObj = {};\r\n          classesToBeClassified.push(classid);\r\n\r\n          if (tableItem.MBom === \"Make\") {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = true;\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = true;\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n            }\r\n            classObject.MBOM = true;\r\n            finalObj.MBOMValue = true;\r\n          } else {\r\n            classObject.MBOM = false;\r\n            finalObj.MBOMValue = false;\r\n          }\r\n\r\n          updatedAssignedClasses.push(classObject);\r\n          finalObj = {\r\n            ...finalObj,\r\n            id: classid,\r\n            title: tableItem.Plant,\r\n            Type: \"New\",\r\n          };\r\n          finalArray.push(finalObj);\r\n        }\r\n      }\r\n    });\r\n    //---------------\r\n    let rowstoDelete = [];\r\n    dupInitialAssignedClasses.forEach((initialClass) => {\r\n      const isNotInTableData = !tableData.some(\r\n        (tableItem) => tableItem.Plant === initialClass.title\r\n      );\r\n      if (isNotInTableData) {\r\n        const classid = allPlants.find(\r\n          (classItem) => classItem.title === initialClass.title\r\n        )?.id;\r\n        if (classid) {\r\n          rowstoDelete.push(classid);\r\n        }\r\n      }\r\n    });\r\n\r\n    updatedAssignedClasses = updatedAssignedClasses.filter(\r\n      (classItem) => !rowstoDelete.includes(classItem.id)\r\n    );\r\n\r\n    console.log(\"Rows getting deleted rowstoDelete:\", rowstoDelete);\r\n    //Need to pass this is savetable function\r\n    //---------------\r\n\r\n    console.log(\"After DupInitialAssignedClasses:\", updatedAssignedClasses);\r\n    console.log(\"Classes to be Classified:\", classesToBeClassified);\r\n    console.log(\"Updated Items:\", updatedItems);\r\n    console.log();\r\n\r\n    // Call services with updated data\r\n    const result = await saveData(\r\n      updatedItems,\r\n      classesToBeClassified,\r\n      updatedAssignedClasses,\r\n      headers,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      allPlants,\r\n      productChildren,\r\n      type,\r\n      rowstoDelete,\r\n      finalArray,\r\n      proposedChanges\r\n    );\r\n\r\n    if (result.success) {\r\n      setScreenLoader(false);\r\n      console.log(\"Save result:\", result);\r\n      if (result.Finalmessage === \"\" || result.Finalmessage == null) {\r\n        showSuccessToast(MSG_SAVE_SUCCESS);\r\n      } else {\r\n        // Usage\r\n        showErrorToast(formattedFinalMessage(result.Finalmessage), {\r\n          autoClose: false,\r\n          closeOnClick: false,\r\n        });\r\n      }\r\n      let finalobj = [];\r\n      if (result.ErrorObj && Object.keys(result.ErrorObj).length > 0) {\r\n        let response = processErrorObj(\r\n          result.ErrorObj,\r\n          assignedPlant,\r\n          updatedAssignedClasses,\r\n          uniquePlant\r\n        );\r\n        console.log(\"response is \", response);\r\n        if (response) {\r\n          setUniqueData(response.uniquePlant);\r\n          //setAssignedPlant(response.assignedPlant);\r\n          finalobj = response.updatedAssignedClasses;\r\n        }\r\n      } else {\r\n        finalobj = updatedAssignedClasses;\r\n      }\r\n\r\n      if (finalobj) {\r\n        // change format of final object as the asignedPlant\r\n        setAssignedPlant(finalobj);\r\n        setDupInitialAssignedClasses(finalobj);\r\n      }\r\n    } else {\r\n      setScreenLoader(false);\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n    }\r\n\r\n    // showSuccessToast(MSG_SAVE_SUCCESS);\r\n    // alert(\"Save action triggered. Check console for details.\");\r\n  };\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(() => {\r\n    return type === \"Change Action\"\r\n      ? getTableData(CAItemDetailsTable, type)\r\n      : getTableData(assignedPlant, type);\r\n  }, [CAItemDetailsTable, assignedPlant, type]);\r\n\r\n  const uniqueTableData = useMemo(\r\n    () => getUniqueTableData(uniqueData),\r\n    [uniqueData]\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Table Data:\", uniqueTableData);\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  // Define columns for the table\r\n  const columns = useMemo(\r\n    () => tableColumns(CAName, type, isRemoveMode, handleRemovePlant),\r\n    [CAName, type, isRemoveMode, handleRemovePlant]\r\n  );\r\n\r\n  const uniqueColumn = useMemo(() => uniqueColumns, []);\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    // dispatch(false);\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n        proposedChanges: [],\r\n      })\r\n    );\r\n    dispatch(\r\n      setCAItemDetails({\r\n        CAItemDetails: [],\r\n        CAallPlants: [],\r\n        CAisMFGCA: false,\r\n        CAheaders: {},\r\n      })\r\n    );\r\n\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"[PlantAssignment] State Changes:\", {\r\n      loading,\r\n      loadingParentDetails,\r\n      isDropped,\r\n    });\r\n  }, [loading, loadingParentDetails, isDropped]);\r\n\r\n  const handleReset = () => {\r\n    // Reset all states related to file upload\r\n    setValidatedData(null);\r\n    setSelectedFiles(null);\r\n    setValidationErrors([]);\r\n    setShowErrorsModal(false);\r\n\r\n    // Re-enable the file input\r\n    setIsFileInputDisabled(false);\r\n\r\n    // Clear the file input value using the ref\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = \"\"; // Reset the file input value\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button\r\n    setIsCreateButtonDisabled(true);\r\n\r\n    // Optionally show a toast message\r\n    showSuccessToast(\"File upload has been reset.\");\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n\r\n    if (!validatedData) {\r\n      showErrorToast(\"Please upload and validate a file before proceeding.\");\r\n      return;\r\n    }\r\n\r\n    setScreenLoader(true); // Show loader when the process starts\r\n\r\n    // const CAHeaders = await fetchCsrfToken(); // Fetch headers\r\n    try {\r\n      await processManufacturingCA(\r\n        validatedData,\r\n        showSuccessToastWithProgress,\r\n        showErrorToastWithProgress\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error in handleSubmit:\", error);\r\n    } finally {\r\n      setScreenLoader(false); // Hide loader after the process is complete\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button after submission\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {screenLoader && <Loader />}\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && (\r\n        <div\r\n          style={{\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n            position: \"relative\",\r\n          }}\r\n        >\r\n          <DragAndDropComponent />\r\n\r\n          {/* File Input & Submit Button Positioned at Bottom Center */}\r\n          <div\r\n            style={{\r\n              padding: \"0px 0px 10px 0px\",\r\n              position: \"absolute\",\r\n              bottom: \"10px\", // Adjust as needed\r\n              left: \"50%\",\r\n              transform: \"translateX(-50%)\",\r\n              zIndex: 10,\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <Button\r\n              variant=\"outline-primary\"\r\n              onClick={() => {\r\n                const link = document.createElement(\"a\");\r\n                link.href =\r\n                  \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\"; // Use the raw file URL for direct download\r\n                link.download = \"plant_assignment_template.xlsx\"; // Set the file name for the download\r\n                link.click();\r\n              }}\r\n            >\r\n              Download Template\r\n            </Button>\r\n\r\n            <Form.Group controlId=\"formFileMultiple\">\r\n              <Form.Control\r\n                type=\"file\"\r\n                multiple\r\n                onChange={handleFileInputChange}\r\n                disabled={isFileInputDisabled}\r\n                ref={fileInputRef} // Attach the ref to the file input\r\n              />\r\n            </Form.Group>\r\n            <Button variant=\"outline-danger\" onClick={handleReset}>\r\n              <FontAwesomeIcon icon={faRotateLeft} />\r\n            </Button>\r\n\r\n            <div\r\n              style={{\r\n                display: \"inline-block\",\r\n                cursor: isCreateButtonDisabled ? \"not-allowed\" : \"pointer\", // Apply cursor style to the wrapper div\r\n              }}\r\n            >\r\n              <Button\r\n                variant=\"outline-primary\"\r\n                onClick={handleSubmit}\r\n                disabled={isCreateButtonDisabled} // Disable the button\r\n              >\r\n                Create Manufacturing CA\r\n              </Button>\r\n            </div>\r\n\r\n            {/* <Button variant=\"outline-primary\" onClick={handleReset}>\r\n              Reset\r\n            </Button> */}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n          {/* Show initial loader when loading is true */}\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && (\r\n                <CardWithDragAndDrop\r\n                  data={cardData}\r\n                  widgetType=\"PlantAssignment\"\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <PlantAssignmentToolbarNativeCta\r\n                  uniquedata={uniqueTableData}\r\n                  uniqueColumn={uniqueColumn}\r\n                  CAName={CAName}\r\n                  onAddPlant={handleAdded}\r\n                  addedPlant={handleUnique}\r\n                  onSave={handleSave}\r\n                  onRemove={handleRemove}\r\n                  state={state}\r\n                  type={type}\r\n                  isMFGCA={isMFGCA}\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  meta={{ updateTableData }}\r\n                  widgetType=\"Plant_Assignment_Widget\"\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      {/* Show validation errors in ErrorDisplayTable\r\n       {validationErrors.length > 0 && (\r\n              <ErrorDisplayTable errors={validationErrors} />\r\n            )} */}\r\n      {/* Show validation errors in ContentErrorsModal */}\r\n      <ContentErrorsModal\r\n        show={showErrorsModal}\r\n        onHide={() => setShowErrorsModal(false)}\r\n        errors={validationErrors}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignment;\r\n\r\nexport const getSaveDataForManufacturingCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemPlants: item.Plant.filter((plant) => plant.color) // include only if color exists\r\n          .map((plant) => {\r\n            const { color, ...rest } = plant;\r\n            return {\r\n              ...rest,\r\n              PlantType: color === \"green\" ? \"New\" : \"old\",\r\n            };\r\n          }),\r\n      };\r\n    }),\r\n  };\r\n  console.log(\"Payload for the Save is :\", payload);\r\n  const SaveURL =\r\n    \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/flowDownCA/processMFGCA\";\r\n\r\n  try {\r\n    // const response = await fetchData(\"POST\", SaveURL, payload);\r\n    const response = true;\r\n\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport PlantAssignment from \"./plantAssignment\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <PlantAssignment />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n","import axios from \"axios\";\r\nimport { fetchData, loadWAFData } from \"../../../utils/helpers\";\r\n\r\n\r\n// Function to extract IDs from titles\r\nconst extractIdsFromTitles = (data, allPlants) => {\r\n  console.log(\"Data Received for ID Extraction:\", data);\r\n  console.log(\"[PlantAssignment] All Plants Data:\", allPlants);\r\n\r\n  const newClasses = data\r\n  .map((item) => {\r\n    const itemTitle = item.title.replace(/\\s+/g, '').replace(/plant/i, '');\r\n    \r\n    const matchedPlant = allPlants.find((plant) => {\r\n      const plantTitle = plant.title.replace(/\\s+/g, '').replace(/plant/i, '');\r\n      return plantTitle.toLowerCase() === itemTitle.toLowerCase();\r\n    });\r\n\r\n    return matchedPlant ? matchedPlant.id : null;\r\n  })\r\n  .filter((id) => id !== null);\r\n // Remove null values (non-matching titles)\r\n\r\n  console.log(\"Extracted IDs (newClasses):\", newClasses);\r\n  return newClasses;\r\n};\r\n\r\nexport const handleRemoveData = async( allPlants, removedTitles,productId,type) =>{\r\n\r\n  \r\n  console.log(\"allPlants\",allPlants);\r\n  console.log(\"removedTitles\",removedTitles);\r\n  const rowstoDelete = extractIdsFromTitles(removedTitles, allPlants);\r\n  // console.log(\"newClasses handleRemoveData\",newClasses);\r\n\r\n  if (rowstoDelete.length > 0) {\r\n    let declassifyUrl =\r\n      \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n\r\n    let classifybody = {\r\n      id: productId,\r\n      type: type,\r\n      classes: rowstoDelete,\r\n    };\r\n    const declassifyResponse = await fetchData(\r\n      declassifyUrl,\r\n      classifybody,\r\n      \"POST\"\r\n    );\r\n    console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n  }\r\n  \r\n}\r\n\r\n// Updated handleAddData function\r\nexport const handleAddData = async (\r\n  data,\r\n  allPlants,\r\n  objectId,\r\n  type,\r\n  proposedChanges,\r\n  productChilds\r\n) => {\r\n  console.log(\"Data Received for handleAddData:\", data);\r\n  \r\n  const newClasses = extractIdsFromTitles(data, allPlants);\r\n  console.log(\"newClasses \",newClasses);\r\n  console.log(\"productChilds\",productChilds);\r\n  let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n    console.log(\"Processing prodChild:\", prodChild); \r\n    if (prodChild.state.toLowerCase() === \"released\") {\r\n      console.log(\"Released prodChild:\", prodChild); \r\n      const change = proposedChanges.find(\r\n        (change) =>\r\n          change.identifier === prodChild.id &&\r\n          change.action.toLowerCase() === \"modify\"\r\n      );\r\n      console.log(\"Matching change for prodChild:\", change); \r\n      return !change;\r\n    }\r\n    console.log(\"prodChild state is not 'released':\", prodChild.state); \r\n    return false;\r\n  });\r\n  console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n  console.log(\"data\",data);\r\n  console.log(\"allPlants\",allPlants);\r\n  \r\n  \r\n  \r\n\r\n  // Make the API call if newClasses is not empty\r\n  if (newClasses.length > 0) {\r\n    const classifyUrl =\r\n      \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n    const classifybody = {\r\n      id: objectId, // Use objectId from Redux\r\n      type: type, // Use type from Redux\r\n      classes: newClasses,\r\n      mode: \"classifyParent\",\r\n    };\r\n\r\n    console.log(\"Classify API Body:\", classifybody);\r\n\r\n    try {\r\n      const classifyResponse = await fetchData(classifyUrl, classifybody, \"POST\");\r\n      console.log(\"Classify Response:\", JSON.stringify(classifyResponse));\r\n    } catch (error) {\r\n      console.error(\"Error in Classify API Call:\", error);\r\n    }\r\n  }\r\n};\r\n\r\n\r\nexport const saveData = async (\r\n  updatedItems,\r\n  classesToBeClassified,\r\n  initialAssignedClasses,\r\n  headers,\r\n  productId,\r\n  AllClasses,\r\n  productChilds,\r\n  type,\r\n  rowstoDelete,\r\n  finalArray,\r\n  proposedChanges\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Save Data] Starting data saving process...\");\r\n    console.log(\"Type in Save Table Data:\", type);\r\n    console.log(\"Final aRRAY IS inside Save:\", finalArray);\r\n    console.log(\"Proposed Changes in Save\", proposedChanges);\r\n    const classifiedClasses = [...classesToBeClassified];\r\n    const WAFData = await loadWAFData();\r\n    const fetchOOTBData = async (url, body, method) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(body),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Response received:\", response);\r\n            resolve(response);\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error);\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const fetchData = async (\r\n      url,\r\n      body = null,\r\n      method = \"GET\"\r\n      // headers = {}\r\n    ) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Method is:\");\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n\r\n      try {\r\n        const response = await axios({\r\n          url,\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: body, // Include body only if provided\r\n        });\r\n\r\n        console.log(\"Response received:\", response.data);\r\n        return response.data;\r\n      } catch (error) {\r\n        console.error(\"Request failed:\", error);\r\n        throw error; // Propagate the error to the caller\r\n      }\r\n    };\r\n\r\n    // released childs but not present in CA Proposed Changes\r\n    let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n      console.log(\"Processing prodChild:\", prodChild);\r\n      if (prodChild.state.toLowerCase() === \"released\") {\r\n        console.log(\"Released prodChild:\", prodChild);\r\n        const change = proposedChanges.find(\r\n          (change) =>\r\n            change.identifier === prodChild.id &&\r\n            change.action.toLowerCase() === \"modify\"\r\n        );\r\n        console.log(\"Matching change for prodChild:\", change); \r\n        return !change;\r\n      }\r\n      console.log(\"prodChild state is not 'released':\", prodChild.state); \r\n      return false;\r\n    });\r\n    console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n\r\n    let ErrorObj = [];\r\n    finalArray.forEach((classItem) => {\r\n      //if (classItem.Type === \"New\" || classItem.Type === \"Update\" ) {\r\n      if (classItem.MBOMValue) {\r\n        let prodchilds = [];\r\n        NotPropagableChilds.forEach((notPropagableChild) => {\r\n          if (!notPropagableChild.classes.includes(classItem.id)) {\r\n            prodchilds.push({\r\n              childId: notPropagableChild.id,\r\n              childName: notPropagableChild.name,\r\n            });\r\n          }\r\n        });\r\n        if (prodchilds.length > 0) {\r\n          ErrorObj.push({\r\n            id: classItem.id,\r\n            title: classItem.title,\r\n            childs: prodchilds,\r\n            type: classItem.Type,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    let Finalmessage = \"\";\r\n    console.log(\"ErrorObj IS\", ErrorObj);\r\n    ErrorObj.forEach((item) => {\r\n      let message = \"\";\r\n\r\n      // Check if item.childs is an array and contains valid objects with titles\r\n      if (\r\n        Array.isArray(item.childs) &&\r\n        item.childs.every((child) => child.childName)\r\n      ) {\r\n        const childTitles = item.childs\r\n          .map((child) => child.childName)\r\n          .join(\", \");\r\n        console.log(\"Chilld Titles are\", childTitles);\r\n        if (item.type.toLowerCase() !== \"new\") {\r\n          message = `${item.title} MBOM can't be Make due to unclassified child items: ${childTitles}`;\r\n        } else {\r\n          message = `Unable to classify product ${item.title} due to unclassified child items: ${childTitles}`;\r\n        }\r\n        console.log(\"Message is:\", message);\r\n      } else {\r\n        // Handle case where childs is invalid or missing titles\r\n        message = `Invalid child data for ${item.title}.`;\r\n      }\r\n\r\n      //  item.message = message;\r\n      Finalmessage += `${message}\\n`; // Using '\\n' to separate each message with a new line\r\n    });\r\n    console.log(ErrorObj);\r\n    console.log(\"Concatenated Messages:\\n\", Finalmessage);\r\n\r\n    let newClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.Type.toLowerCase() === \"new\" &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n    console.log(\"New Classes are:\", newClasses);\r\n    let updateBody = {};\r\n    finalArray.forEach((classItem) => {\r\n      const isIdNotInErrorObj = !ErrorObj.some(\r\n        (errorItem) => errorItem.id === classItem.id\r\n      );\r\n      if (\r\n        isIdNotInErrorObj &&\r\n        (classItem.Type.toLowerCase() === \"update\" ||\r\n          (classItem.Type.toLowerCase() === \"new\" && classItem.MBOMValue))\r\n      ) {\r\n        updateBody[classItem.MBOMName] = classItem.MBOMValue;\r\n      }\r\n    });\r\n    console.log(\"Update body is:\", updateBody);\r\n\r\n    let propagateClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.MBOMValue &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n\r\n    console.log(\"Propogateable classes are\", propagateClasses);\r\n\r\n    if (newClasses.length > 0) {\r\n      let classifyUrl =\r\n        \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: newClasses,\r\n        mode: \"classifyParent\",\r\n      };\r\n      const classifyResponse = await fetchData(\r\n        classifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n    }\r\n\r\n    if (Object.keys(updateBody).length > 0) {\r\n      const nextApiUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${productId}`;\r\n      const response = await fetchOOTBData(nextApiUrl, \"\", \"GET\");\r\n      console.log(\"CStamp Response:\", response);\r\n      let cestamp = response.member[0]?.cestamp || \"\";\r\n      updateBody[\"cestamp\"] = cestamp;\r\n\r\n      const patchUrl = `https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${productId}`;\r\n      await fetchData(patchUrl, updateBody, \"PATCH\");\r\n      console.log(\"Updated database successfully.\");\r\n    }\r\n\r\n    if (\r\n      propagateClasses.length > 0 &&\r\n      productChilds.length > 0 &&\r\n      type === \"VPMReference\"\r\n    ) {\r\n      let classifyUrl =\r\n        \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: propagateClasses,\r\n        childs: productChilds,\r\n        mode: \"classifychilds\",\r\n      };\r\n      const childclassifyResponse = await fetchData(\r\n        classifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\r\n        \"child classifyResponse:\",\r\n        JSON.stringify(childclassifyResponse)\r\n      );\r\n    }\r\n    if (rowstoDelete.length > 0) {\r\n      let declassifyUrl =\r\n        \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: rowstoDelete,\r\n      };\r\n      const declassifyResponse = await fetchData(\r\n        declassifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n    }\r\n\r\n    console.log(\"All classification API calls completed successfully.\");\r\n\r\n    return {\r\n      success: true,\r\n      message: \"Data saved successfully\",\r\n      ErrorObj: ErrorObj,\r\n      Finalmessage: Finalmessage,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error occurred:\", error);\r\n    return { success: false, message: \"Failed to save data\", error };\r\n  }\r\n};\r\n"],"names":["_ref","variant","message","show","className","_jsx","Alert","children","onHide","title","footerButtons","_jsxs","Modal","size","centered","Header","closeButton","Title","Body","Footer","map","btn","index","Button","onClick","label","errors","processedErrors","useMemo","errorGroups","reduce","groups","error","rowMatch","match","columnMatch","errorMsg","split","slice","join","rowNumber","columnName","includes","columns","push","Object","values","sort","a","b","Number","cache","CellMeasurerCache","fixedWidth","defaultHeight","rowRenderer","_ref2","key","style","parent","CellMeasurer","columnIndex","rowIndex","width","column","i","err","ReusableAlert","_Fragment","length","AutoSizer","_ref3","height","List","rowCount","rowHeight","deferredMeasurementCache","console","log","CustomModal","ErrorPopup","forwardRef","ref","data","addedItem","CAName","state","showWarningToast","useToast","rowSelection","setRowSelection","useState","useEffect","addPlant","selectedItems","table","getSelectedRowModel","rows","item","original","MSG_EMPTYADD_ERROR","useImperativeHandle","enhancedColumns","id","cell","row","type","checked","getIsSelected","onChange","getToggleSelectedHandler","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","getRowModel","forEach","toggleSelected","maxHeight","backgroundColor","flexRender","getVisibleCells","columnDef","getContext","accessorKey","WidgetLifecycle","handleDrop","usePlantDropableArea","showSuccessToast","showErrorToast","loading","setLoading","window","widget","trace","addEvent","async","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","userClickedRefresh","sessionStorage","getItem","some","line","isAutoTriggeredRefresh","warn","removeItem","latestDraggedData","store","getState","droppedObject","droppedObjectData","initialDraggedData","items","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","Loader","PlantRenderer","plants","itemId","isRemoveMode","handleRemovePlant","plant","marginRight","display","alignItems","color","fontWeight","PlantName","AiOutlineClose","cursor","marginLeft","PlantID","getTableData","tableData","ItemName","ItemTitle","Plant","ItemPlants","ItemId","Seq","Status","MFGChange","MFGStatus","Change","ChangeStatus","OracleTemplate","MBom","MBOM","uniqueColumns","header","onAddPlant","addedPlant","onSave","onRemove","uniquedata","uniqueColumn","isMFGCA","addPlantPopup","setAddPlantPopup","availablePlantRef","useRef","MSG_ADDPRODUCT_RELEASED_ERROR","MSG_ADDPRODUCT_NOT_ALLOWED_ERROR","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","handleRemove","_availablePlantRef$cu","current","AvailablePlant","newItems","DragAndDropComponent","performSearch","useInterComSearch","Image","src","alt","SearchInput","onSearch","searchText","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","objectId","objectType","callManufacturingCAApi","response","url","body","arguments","undefined","method","JSON","stringify","axios","headers","fetchData","processManufacturingCA","validatedData","showSuccessToastWithProgress","showErrorToastWithProgress","csrfTokenHeaders","fetchCsrfToken","CAHeaders","_objectSpread","credentials","getValue","credentialsParts","companyName","collabSpace","allPlantsData","getAllPlants","manufacturingCABody","excelData","uniquePlantTitles","Set","itemName","toString","trim","plantsList","p","name","add","parentPlants","plantTitle","matchedPlant","find","replace","CATitle","CAOrganization","CACollabSpace","CAOwner","Items","ParentPlants","createManufacturingCABody","concat","PlantAssignment","useToastWithProgress","setValidatedData","showErrorsModal","setShowErrorsModal","validationErrors","setValidationErrors","initializeDroppableArea","tableKey","setTableKey","setTableData","assignedPlant","setAssignedPlant","selectedFiles","setSelectedFiles","uniqueData","setUniqueData","CAItemDetailsTable","setCAItemDetailsTable","isFileInputDisabled","setIsFileInputDisabled","isCreateButtonDisabled","setIsCreateButtonDisabled","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","setIsRemoveMode","dispatch","useDispatch","securityContext1","fileInputRef","useCallback","plantId","filter","extractPlantData","plantData","plantName","selectedTableRows","useSelector","CAItemDetails","CAItemObjectDetails","CAAllPlants","CAallPlants","CAheaders","CAisMFGCA","loadingParentDetails","proposedChanges","plantObjectData","isDropped","allPlants","uniquePlant","uniquePlants","asignedPlant","initialAssignedPlants","productChildren","getUniquePlant","sourceData","assignedTablePlants","flatMap","_item$Plant","uniqueTablePlants","updateTableData","updatedData","prevKey","cardData","_droppedObjectData$in5","_droppedObjectData$in6","dupInitialAssignedClasses","setDupInitialAssignedClasses","_droppedObjectData$in7","_droppedObjectData$in8","updatedItems","classesToBeClassified","finalArray","updatedAssignedClasses","intclass","updatedClass","tableItem","_allPlants$find","finalObj","classid","classitem","test","MBOMName","MBOMValue","Type","initialClass","_allPlants$find2","classObject","rowstoDelete","_allPlants$find3","classItem","result","saveData","success","Finalmessage","MSG_SAVE_SUCCESS","finalMessage","messageList","msg","userSelect","position","paddingRight","handleCopy","textToCopy","navigator","clipboard","writeText","right","top","background","border","fontSize","FaRegCopy","formattedFinalMessage","autoClose","closeOnClick","finalobj","ErrorObj","keys","errorObj","processErrorObj","MSG_SAVE_FAILURE","newTableData","uniqueTableData","getUniqueTableData","owner","Owner","Description","imageURL","EIN","getCardData","tableColumns","value","e","_table$options$meta","updatedValue","target","r","options","meta","disabled","appearance","padding","textAlign","onMouseOver","onMouseOut","flexDirection","justifyContent","bottom","left","transform","zIndex","gap","link","document","createElement","href","download","click","Form","Group","controlId","Control","multiple","event","files","validExtensions","Array","from","file","toLowerCase","endsWith","reader","FileReader","onload","Uint8Array","workbook","XLSX","sheetName","SheetNames","sheet","Sheets","jsonData","sheet_to_json","normalizedHeaders","errorDescription","formattedErrors","onerror","readAsArrayBuffer","handleFileChange","finally","handleReset","FontAwesomeIcon","icon","faRotateLeft","handleHomeClick","setIsDropped","setDroppedObjectData","parentDetails","versions","setPlantObjectData","setCAItemDetails","CardWithDragAndDrop","widgetType","PlantAssignmentToolbarNativeCta","_droppedObjectData$in3","_droppedObjectData$in4","prev","reduxRow","reduxPlants","existingPlants","updatedExistingPlants","ep","rp","newPlantsToAdd","existsInRedux","rest","_objectWithoutProperties","_excluded","handleAddData","updatedTableData","selectedRow","transformedData","getSaveDataForManufacturingCA","updatedCADetails","originalItem","ItemType","ItemState","_droppedObjectData$in","_droppedObjectData$in2","selectedTitles","removedTitles","prevUniquePlants","handleRemoveData","alert","ReusableTable","ContentErrorsModal","_droppedObjectData$in9","_droppedObjectData$in10","_droppedObjectData$in11","objectData","payload","CAId","organization","caDetails","ca","_excluded2","PlantType","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","querySelector","getElementById","appendChild","ReactDOM","render","Provider","ToastContainer","start","injectedScript","textContent","injectRefreshListener","extractIdsFromTitles","newClasses","itemTitle","productId","declassifyUrl","classifybody","classes","declassifyResponse","productChilds","NotPropagableChilds","prodChild","change","identifier","action","classifyUrl","classifyResponse","initialAssignedClasses","AllClasses","ENOVIA_BASE_URL","process","WAFData","loadWAFData","fetchOOTBData","Promise","resolve","reject","authenticatedRequest","onComplete","onFailure","prodchilds","notPropagableChild","childId","childName","childs","isArray","every","child","childTitles","errorItem","updateBody","propagateClasses","_response$member$","nextApiUrl","cestamp","member","patchUrl","childclassifyResponse"],"sourceRoot":""}