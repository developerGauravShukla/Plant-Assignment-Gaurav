{"version":3,"file":"static/js/86.c6b2f780.chunk.js","mappings":"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","sources":["components/Alert/ReusableAlert.jsx","components/Modal/customModal.jsx","components/ErrorPopup/ErrorPopup.jsx","components/Modals/ContentErrorsModal.jsx","hooks/usePlantDropableArea.js","pages/plantAssignment/WidgetLifecycle.jsx","pages/plantAssignment/dataHelpers.js","pages/plantAssignment/plantAssignmentToolbarNativeCta.jsx","pages/plantAssignment/DragAndDrop.jsx","services/api/PlantAssignment/createMFGCA.js","pages/plantAssignment/plantAssignment.jsx","pages/plantAssignment/plantIndex.js"],"sourcesContent":["import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst ReusableAlert = ({\r\n  variant = \"info\",\r\n  message,\r\n  show = true,\r\n  className = \"\",\r\n}) => {\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Alert variant={variant} className={className}>\r\n      {typeof message === \"string\" ? message : message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ReusableAlert;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","import React, { useMemo } from \"react\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"./ErrorPopup.css\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  const processedErrors = useMemo(() => {\r\n    // Group errors by row number\r\n    const errorGroups = errors.reduce((groups, error) => {\r\n      const rowMatch = error.match(/Row (\\d+):/);\r\n      const columnMatch = error.match(/\"([^\"]*)\" (?:is required|value)/);\r\n      const errorMsg = error.split(\": \").slice(1).join(\": \");\r\n\r\n      const rowNumber = rowMatch ? rowMatch[1] : \"N/A\";\r\n      const columnName = columnMatch\r\n        ? columnMatch[1]\r\n        : error.includes(\"Collaborative Space\", \"Quantity\")\r\n        ? \"Collaborative Space\"\r\n        : \"N/A\";\r\n\r\n      if (!groups[rowNumber]) {\r\n        groups[rowNumber] = {\r\n          rowNumber,\r\n          columns: [],\r\n          errors: [],\r\n        };\r\n      }\r\n\r\n      groups[rowNumber].columns.push(columnName);\r\n      groups[rowNumber].errors.push(errorMsg || error);\r\n\r\n      return groups;\r\n    }, {});\r\n\r\n    // Convert groups to array and sort by row number\r\n    return Object.values(errorGroups).sort(\r\n      (a, b) => Number(a.rowNumber) - Number(b.rowNumber)\r\n    );\r\n  }, [errors]);\r\n\r\n  const cache = new CellMeasurerCache({\r\n    fixedWidth: true,\r\n    defaultHeight: 50,\r\n  });\r\n\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const error = processedErrors[index];\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"table-row\">\r\n          <div className=\"table-cell\" style={{ width: \"15%\" }}>\r\n            {error.rowNumber}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"25%\" }}>\r\n            {error.columns.map((column, i) => (\r\n              <div key={i}>{column}</div>\r\n            ))}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"60%\" }}>\r\n            <ul className=\"error-list\">\r\n              {error.errors.map((err, i) => (\r\n                <li key={i}>{err}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"error-popup-container\">\r\n      <ReusableAlert\r\n        variant=\"danger\"\r\n        message={\r\n          <>\r\n            <strong>⚠️ Note:</strong> Below reports show only uploaded\r\n            spreadsheet error rows. To resolve these issues, update the\r\n            spreadsheet and re-import. ({processedErrors.length} errors found)\r\n          </>\r\n        }\r\n        className=\"custom-alert\"\r\n      />\r\n\r\n      <div className=\"table-wrapper\">\r\n        {/* Static Header */}\r\n        <div className=\"static-header\">\r\n          <div className=\"header-cell\" style={{ width: \"15%\" }}>\r\n            Row Number\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"25%\" }}>\r\n            Column Name\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"60%\" }}>\r\n            Error Description\r\n          </div>\r\n        </div>\r\n\r\n        {/* Virtualized Error List */}\r\n        <div className=\"table-container\">\r\n          <AutoSizer>\r\n            {({ height, width }) => (\r\n              <List\r\n                width={width}\r\n                height={height}\r\n                rowCount={processedErrors.length}\r\n                rowHeight={cache.rowHeight}\r\n                deferredMeasurementCache={cache}\r\n                rowRenderer={rowRenderer}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;\r\n","// ContentErrorsModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst ContentErrorsModal = ({ show, onHide, errors }) => {\r\n  console.log(`[ContentErrorsModal.jsx] errors:`, errors);\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Content Errors\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ErrorPopup errors={errors} />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ContentErrorsModal;\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setInitialDroppedObjectData,\r\n  setPlantObjectData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport {\r\n  setIsDropped as setIsDroppedAction,\r\n  setLoading,\r\n} from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport usePlantAssignment from \"./usePlantAssignment\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  // fetchObjectDetails as fetchObjectDetailsService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_CSRF_HEADERS_FAILED,\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\nimport { Card } from \"react-bootstrap\";\r\n\r\nconst usePlantDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handlePlantAssignment } = usePlantAssignment();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n        // const objectDetailsResult = {\r\n        //   success: \"true\",\r\n        //   data: {\r\n        //     cardData: {\r\n        //       Type: \"Change Action\",\r\n        //       \"Maturity State\": \"In Work\",\r\n        //       Owner: \"Sudarshan Sambamurthy\",\r\n        //       \"Collaborative Space\": \"Micro Motion\",\r\n        //       \"Collaborative Space Title\": \"MSOL-Micro Motion\",\r\n        //       \"Dropped Revision\": \"\",\r\n        //       \"Dropped Revision ID\": \"\",\r\n        //       \"Latest Released Revision\": \"\",\r\n        //       \"Latest Released Revision ID\": \"\",\r\n        //       EIN: \"\",\r\n        //       \"CAD Format\": \"\",\r\n        //       imageURL:\r\n        //         \"https://oi000186152-us1-space.3dexperience.3ds.com:443/enovia/snresources/images/icons/large/I_ECM_CA108x144.png\",\r\n        //       relativePath:\r\n        //         \"/resources/v1/modeler/dslc/changeaction/474D00260AC21A0067CA9D1000015F59\",\r\n        //       Title: dataItems[0]?.displayName,\r\n        //       Name: dataItems[0]?.displayName,\r\n        //       organization: \"BU-0000001\",\r\n        //       \"Latest Revision\": \"-\",\r\n        //     },\r\n        //   },\r\n        // };\r\n\r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n\r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n          dispatch(setIsDroppedAction(true));\r\n\r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handlePlantAssignment(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handlePlantAssignment]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\r\n            \"VPMReference\",\r\n            \"Document\",\r\n            \"Raw_Material\",\r\n            \"Change Action\",\r\n          ]; //\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n\r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default usePlantDropableArea;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader/> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\n\r\nexport const PlantRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n}) => {\r\n  console.log(\"PlantRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n            color: plant.color || \"black\", // Apply red or green based on color property\r\n            fontWeight: \"bold\", // Optional: Make it more visible\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {isRemoveMode && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"4px\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (tableData, type) => {\r\n  if (!tableData) return [];\r\n\r\n  return tableData.map((data) => {\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        ItemName: data?.ItemTitle || \"N/A\",\r\n        Plant: data?.ItemPlants || [], // ✅ Ensure Plant data is correctly stored\r\n        ItemId: data?.ItemId || \"N/A\", // ✅ Added to be accessible in `tableColumns`\r\n      };\r\n    } else {\r\n      return {\r\n        Plant: data?.title || \"N/A\",\r\n        Seq: data?.Seq || \"1\",\r\n        Status: \"Current\" || \"N/A\",\r\n        \"MFG Change\": data?.MFGChange || \"N/A\",\r\n        \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n        Change: data?.Change || \"N/A\",\r\n        \"Change Status\": data?.ChangeStatus || \"N/A\",\r\n        \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n        \"ERP Status\": \"Active\" || \"N/A\",\r\n        \"ERP Export\": \"Yes\" || \"N/A\",\r\n        \"Lead Plant\": false,\r\n        MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n        \"Sort Value\": \"\",\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName, type, isRemoveMode, handleRemovePlant) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"ItemName\", header: \"Item Name\" },\r\n      {\r\n        accessorKey: \"Plant\",\r\n        header: \"Plant\",\r\n        cell: ({ row }) => (\r\n          <PlantRenderer\r\n            plants={row.original.Plant} // ✅ Uses correct row data\r\n            itemId={row.original.ItemId} // ✅ Passes item ID\r\n            isRemoveMode={isRemoveMode}\r\n            handleRemovePlant={handleRemovePlant}\r\n          />\r\n        ),\r\n      },\r\n    ];\r\n  }\r\n\r\n  return [\r\n    { accessorKey: \"Plant\", header: \"Plant\" },\r\n    { accessorKey: \"Seq\", header: \"Seq\" },\r\n    {\r\n      accessorKey: \"MBom\",\r\n      header: \"MBom\",\r\n      cell: ({ row, getValue, table }) => {\r\n        const handleDropdownChange = (e) => {\r\n          if (!CAName) return; // Prevent changes when disabled\r\n          const updatedValue = e.target.value;\r\n\r\n          // Update the table data state here\r\n          const updatedData = table\r\n            .getRowModel()\r\n            .rows.map((r) =>\r\n              r.id === row.id\r\n                ? { ...r.original, MBom: updatedValue }\r\n                : r.original\r\n            );\r\n\r\n          table.options.meta?.updateTableData(updatedData); // Call custom table update function\r\n        };\r\n\r\n        return (\r\n          <select\r\n            value={getValue()}\r\n            onChange={handleDropdownChange}\r\n            disabled={!CAName} // Disable dropdown if CAName is false\r\n            className={`appearance-none bg-transparent border-none cursor-pointer focus:outline-none`}\r\n            style={{\r\n              ...(CAName === false && { appearance: \"none\" }), // Apply appearance: none only if CAName is false\r\n              width: \"70%\",\r\n              padding: \"5px\",\r\n              fontSize: \"14px\",\r\n              color: \"#333\",\r\n              background: \"none\",\r\n              border: \"none\",\r\n              textAlign: \"left\",\r\n            }}\r\n            onMouseOver={(e) => {\r\n              if (CAName) e.target.style.border = \"1px solid #ccc\";\r\n            }}\r\n            onMouseOut={(e) => {\r\n              if (CAName) e.target.style.border = \"none\";\r\n            }}\r\n          >\r\n            <option value=\"Make\">Make</option>\r\n            <option value=\"Buy\">Buy</option>\r\n          </select>\r\n        );\r\n      },\r\n    },\r\n    { accessorKey: \"Status\", header: \"Status\" },\r\n    { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n    { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n    { accessorKey: \"Change\", header: \"Change\" },\r\n    { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n    { accessorKey: \"Oracle Template\", header: \"Oracle Template\" },\r\n    { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n    { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n    { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n    { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  ];\r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport AvailablePlant from \"../../components/Popup/Popup\";\r\nimport { useRef } from \"react\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\n\r\nconst PlantAssignmentToolbarNativeCta = ({\r\n  onAddPlant,\r\n  addedPlant,\r\n  onSave,\r\n  onRemove,\r\n  uniquedata,\r\n  uniqueColumn,\r\n  CAName,\r\n  state,\r\n  type,\r\n  isMFGCA,\r\n}) => {\r\n  const { showWarningToast } = useToast();\r\n  const [addPlantPopup, setAddPlantPopup] = useState(false);\r\n  const availablePlantRef = useRef();\r\n\r\n  const handleSaveClick = () => {\r\n    if (onSave && CAName) {\r\n      onSave();\r\n    } else if (state === \"RELEASED\") {\r\n      // alert(\r\n      //   \"Change Action is required to update pLANTS, please assign Modify change Action and try again\"\r\n      // );\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      // alert(\r\n      //   \"Change Action is required to update, please assign change Action and try again\"\r\n      // );\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (onRemove) {\r\n      onRemove();\r\n    }\r\n  };\r\n\r\n  console.log(\"[Unique Table Data]:\", uniquedata);\r\n\r\n  const handleData = (data) => {\r\n    console.log(data);\r\n    if (type === \"Change Action\") {\r\n      if (data.length > 0) {\r\n        onAddPlant(data);\r\n        addedPlant(data);\r\n      }\r\n    } else {\r\n      if (data.length > 0) {\r\n        const newItems = data.map((title) => ({\r\n          title: title, // Use the title as Plant (or replace with actual data)\r\n          Seq: \"1\",\r\n          Status: \"Current\",\r\n          \"MFG Change\": \"N/A\",\r\n          \"MFG Status\": \"N/A\",\r\n          Change: \"N/A\",\r\n          \"Change Status\": \"N/A\",\r\n          \"Oracle Template\": \"N/A\",\r\n          \"ERP Status\": \"Active\",\r\n          \"ERP Export\": \"Yes\",\r\n          \"Lead Plant\": \"false\",\r\n          MBom: \"Buy\",\r\n          \"Sort Value\": \"\",\r\n        }));\r\n        onAddPlant(newItems);\r\n\r\n        addedPlant(data);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex cta-absolute\">\r\n        {!isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (type === \"Change Action\") {\r\n                setAddPlantPopup(true);\r\n              } else if (CAName) {\r\n                setAddPlantPopup(true); // Open the modal if CAName is present\r\n              } else if (state === \"RELEASED\") {\r\n                showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR); // Show warning if state is RELEASED\r\n              } else {\r\n                showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR); // Show warning if CAName is missing\r\n              }\r\n            }}\r\n          >\r\n            Add Plant\r\n          </button>\r\n        )}\r\n        {isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              setAddPlantPopup(true);\r\n            }}\r\n          >\r\n            Add/Update Plants\r\n          </button>\r\n        )}\r\n        <button\r\n          className=\"btn btn-outline-success btn-lg m-2\"\r\n          onClick={handleSaveClick}\r\n        >\r\n          Save\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-danger btn-lg m-2\"\r\n          onClick={handleRemove}\r\n        >\r\n          Remove\r\n        </button>\r\n        \r\n      </div>\r\n\r\n      \r\n\r\n      <CustomModal\r\n        show={addPlantPopup}\r\n        onHide={() => setAddPlantPopup(false)}\r\n        title=\"Available Plant\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Add\",\r\n            variant: \"primary\",\r\n            onClick: () => {\r\n              availablePlantRef.current?.addPlant(); // Call addPlant\r\n              setAddPlantPopup(false);\r\n            },\r\n          },\r\n          {\r\n            label: \"Close\",\r\n            variant: \"danger\",\r\n            onClick: () => setAddPlantPopup(false),\r\n          },\r\n        ]}\r\n      >\r\n        <div className=\"modal-body\">\r\n          <AvailablePlant\r\n            ref={availablePlantRef} // Attach the ref\r\n            data={uniquedata} // if isMFGCA is true, pass uniquedata; else, pass empty array\r\n            columns={uniqueColumn}\r\n            CAName={CAName}\r\n            addedItem={handleData}\r\n            state={state}\r\n          />\r\n        </div>\r\n      </CustomModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignmentToolbarNativeCta;\r\n","import React, { useEffect } from \"react\";\r\nimport \"../../components/DragAndDrop/DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../../components/SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropComponent = () => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      console.log(\"Selected objects:\", selectedObjects);\r\n      console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"droppable-container mt-4\">\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import * as XLSX from \"xlsx\";\r\nimport { getAllPlants } from \"./allPlantSevice\";\r\nimport { fetchCsrfToken } from \"./fetchCsrfService\";\r\nimport axios from \"axios\";\r\n\r\n// Import useToastWithProgress\r\n\r\n// const { showSuccessToastWithProgress, showErrorToastWithProgress } = useToastWithProgress();\r\n\r\n\r\nconst fetchData = async (\r\n  url,\r\n  body = null,\r\n  method = \"GET\"\r\n  // headers = {}\r\n) => {\r\n  console.log(\"Fetching URL:\", url);\r\n  console.log(\"Method is:\");\r\n  console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n\r\n  try {\r\n    const response = await axios({\r\n      url,\r\n      method,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      data: body, // Include body only if provided\r\n    });\r\n\r\n    console.log(\"Response received:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Request failed:\", error);\r\n    throw error; // Propagate the error to the caller\r\n  }\r\n};\r\n// Function to create the manufacturing CA body from Excel data and allPlants\r\nexport const createManufacturingCABody = async (\r\n  excelData,\r\n  allPlantsData,\r\n  companyName,\r\n  collabSpace\r\n) => {\r\n  const items = [];\r\n  const uniquePlantTitles = new Set();\r\n\r\n  for (let i = 1; i < excelData.length; i++) {\r\n    const row = excelData[i];\r\n    if (row.length >= 2 && row[0] && row[1]) {\r\n      const itemName = row[0].toString().trim();\r\n      const plantsList = row[1].toString().includes(\",\")\r\n        ? row[1]\r\n            .toString()\r\n            .split(\",\")\r\n            .map((p) => p.trim())\r\n        : [row[1].toString().trim()];\r\n      items.push({\r\n        name: itemName,\r\n        plants: plantsList,\r\n      });\r\n      plantsList.forEach((plant) => uniquePlantTitles.add(plant));\r\n    }\r\n  }\r\n\r\n  const parentPlants = [];\r\n  uniquePlantTitles.forEach((plantTitle) => {\r\n    const matchedPlant = allPlantsData.find((plant) => {\r\n      const normalizedTitle = plant.title.replace(/^Plant\\s+/, \"\");\r\n      return normalizedTitle === plantTitle || plant.title === plantTitle;\r\n    });\r\n    if (matchedPlant) {\r\n      parentPlants.push({\r\n        PlantName: matchedPlant.title.replace(/^Plant\\s+/, \"\"),\r\n        PlantID: matchedPlant.id,\r\n      });\r\n    }\r\n  });\r\n\r\n  return {\r\n    CATitle: \"FromAutomation\",\r\n    CAOrganization: companyName, // company name credentials\r\n    CACollabSpace: collabSpace, // from credentials\r\n    CAOwner: \"e1331143\", \r\n    Items: items,\r\n    ParentPlants: parentPlants,\r\n  };\r\n};\r\n\r\n// Function to make the API call\r\nexport const callManufacturingCAApi = async (body) => {\r\n  const manufacturingCAUrl =\r\n    \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/flowDownCA/createMFGCA\";\r\n\r\n // console.log(\"Headers for Manufacturing CA API:\", CAHeaders);\r\n\r\n  const response = await fetchData(\r\n    manufacturingCAUrl,\r\n    body,\r\n    \"POST\"\r\n  );\r\n  console.log(\"Manufacturing CA Response:\", JSON.stringify(response));\r\n  return response;\r\n};\r\n\r\n// Function to handle file change (only validation)\r\nexport const handleFileChange = async (\r\n  event,\r\n  setValidationErrors,\r\n  setShowErrorsModal,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n  setValidatedData, // New parameter to store validated data\r\n  setSelectedFiles,\r\n  setIsCreateButtonDisabled\r\n) => {\r\n  \r\n  console.log(\"[handleFileChange] Function triggered\");\r\n\r\n  const files = event.target.files;\r\n  const validExtensions = [\r\n    \"application/vnd.ms-excel\",\r\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n  ]; // MIME types for .xls and .xlsx\r\n\r\n  // Check if all files are valid Excel files\r\n  const invalidFiles = Array.from(files).filter(\r\n    (file) =>\r\n      !validExtensions.includes(file.type) &&\r\n      !file.name.toLowerCase().endsWith(\".xls\") &&\r\n      !file.name.toLowerCase().endsWith(\".xlsx\")\r\n  );\r\n\r\n  if (invalidFiles.length > 0) {\r\n    showErrorToast(\"Only Excel files (.xls, .xlsx) can be uploaded\");\r\n    event.target.value = \"\"; // Reset the file input\r\n    setIsCreateButtonDisabled(true); // Disable the button if invalid files are present\r\n    return;\r\n  }\r\n\r\n  const file = files[0];\r\n  const reader = new FileReader();\r\n\r\n  reader.onload = async (e) => {\r\n    const data = new Uint8Array(e.target.result);\r\n    const workbook = XLSX.read(data, { type: \"array\" });\r\n    const sheetName = workbook.SheetNames[0];\r\n    const sheet = workbook.Sheets[sheetName];\r\n    const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1 }); // Get data as a 2D array\r\n\r\n    console.log(\"Parsed Excel Data:\", jsonData);\r\n\r\n    // Validation: Check if the file is empty\r\n    if (jsonData.length === 0) {\r\n      showErrorToast(\"File is empty\");\r\n      setIsCreateButtonDisabled(true);\r\n      return;\r\n    }\r\n\r\n    \r\n\r\n    // Validation: Check if headers match \"Item\" and \"Plants\"\r\n    const normalizedHeaders = jsonData[0].map((header) =>\r\n      header?.toString().trim().toLowerCase()\r\n    ); // Normalize headers\r\n    console.log(\"Normalized Headers:\", normalizedHeaders);\r\n\r\n    if (normalizedHeaders[0] !== \"item\" || normalizedHeaders[1] !== \"plants\") {\r\n      showErrorToast(\r\n        \"File headers are incorrect. Expected headers: 'Item' and 'Plants'\"\r\n      );\r\n      setIsCreateButtonDisabled(true);\r\n      return;\r\n    }\r\n\r\n    // Validation: Check if the file contains only headers and no data\r\n    if (jsonData.length === 1) {\r\n      showErrorToast(\"No data present in the file. Only headers are present.\");\r\n      return;\r\n    }\r\n\r\n    const errors = [];\r\n    for (let i = 1; i < jsonData.length; i++) {\r\n      const row = jsonData[i];\r\n      const item = row[0];\r\n      const plants = row[1];\r\n\r\n      if (!item && plants) {\r\n        errors.push({\r\n          rowNumber: i + 1,\r\n          columnName: \"Item\",\r\n          errorDescription: \"Items can't be empty\",\r\n        });\r\n      }\r\n\r\n      if (item && !plants) {\r\n        errors.push({\r\n          rowNumber: i + 1,\r\n          columnName: \"Plants\",\r\n          errorDescription: \"Plants value is missing\",\r\n        });\r\n      }\r\n    }\r\n\r\n    console.log(\"Validation Errors:\", errors);\r\n\r\n    if (errors.length > 0) {\r\n      const formattedErrors = errors.map(\r\n        (error) =>\r\n          `Row ${error.rowNumber}: \"${error.columnName}\" value ${error.errorDescription}`\r\n      );\r\n\r\n      console.log(\"[createMFGCA.js] Formatted Errors:\", formattedErrors);\r\n\r\n      setValidationErrors(formattedErrors);\r\n      setShowErrorsModal(true);\r\n      setIsCreateButtonDisabled(true);\r\n    } else {\r\n      showSuccessToast(\"File uploaded successfully with no errors\");\r\n      setValidatedData(jsonData); // Store validated data for further processing\r\n      setSelectedFiles(file);// Update selectedFiles state only after successful validation\r\n      setIsCreateButtonDisabled(false);\r\n    }\r\n  };\r\n\r\n  reader.onerror = () => {\r\n    showErrorToast(\"Failed to read the file. Please try again.\");\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n\r\n  reader.readAsArrayBuffer(file);\r\n};\r\n\r\n// New function to process Manufacturing CA\r\nexport const processManufacturingCA = async (\r\n  validatedData,\r\n  showSuccessToastWithProgress,\r\n  showErrorToastWithProgress\r\n) => {\r\n  try {\r\n\r\n    const csrfTokenHeaders = await fetchCsrfToken();\r\n    const CAHeaders = {\r\n      \"Content-Type\": \"application/json\",\r\n      ...csrfTokenHeaders\r\n    };\r\n    let credentials = window.widget.getValue(\"Credentials\");\r\n    console.log(\"credentials createMFGCA\", credentials);\r\n    const credentialsParts = credentials.split(\".\");\r\n    console.log(\"credentialsParts\", credentialsParts);\r\n    const companyName = credentialsParts[1]; // Value after the first dot\r\n    console.log(\"Company Name:\", companyName);\r\n    const collabSpace = credentialsParts[2]; // Value after the second dot\r\n\r\n    console.log(\"Collab Space:\", collabSpace);\r\n\r\n    const allPlantsData = await getAllPlants([collabSpace], CAHeaders, \"\");\r\n    console.log(\"Fetched allPlantsData:\", allPlantsData);\r\n\r\n    const manufacturingCABody = await createManufacturingCABody(\r\n      validatedData,\r\n      allPlantsData,\r\n      companyName,\r\n      collabSpace\r\n    );\r\n    console.log(\r\n      \"[processManufacturingCA] Manufacturing CA Body (JSON):\",\r\n      JSON.stringify(manufacturingCABody, null, 2)\r\n    );\r\n\r\n    // Pass headers to callManufacturingCAApi\r\n    const response = await callManufacturingCAApi(\r\n      manufacturingCABody\r\n    );\r\n    console.log(\"[processManufacturingCA] Manufacturing CA API Response:\", response);\r\n\r\n    // Extract CAName from the response\r\n    const CAName = response?.CAName ;\r\n    showSuccessToastWithProgress(`Manufacturing CA created successfully! Name: ${CAName}`);\r\n    \r\n    // showSuccessToast(\"Manufacturing CA created successfully!\");\r\n  } catch (error) {\r\n    console.error(\"Error in processManufacturingCA:\", error);\r\n    showErrorToastWithProgress(\"Failed to create Manufacturing CA. Please try again.\");\r\n  }\r\n};","import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n  useRef,\r\n} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport \"./plantAssignment.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns,\r\n} from \"./dataHelpers\";\r\nimport useToast, { useToastWithProgress } from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport { saveData } from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport PlantAssignmentToolbarNativeCta from \"./plantAssignmentToolbarNativeCta\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport DragAndDropComponent from \"./DragAndDrop\";\r\nimport * as XLSX from \"xlsx\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport { getAllPlants } from \"../../services/api/PlantAssignment/allPlantSevice\";\r\nimport axios from \"axios\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport {\r\n  handleFileChange,\r\n  processManufacturingCA,\r\n} from \"../../services/api/PlantAssignment/createMFGCA\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\"; // This is the reset-style icon\r\n\r\nconst PlantAssignment = () => {\r\n  const { showSuccessToastWithProgress, showErrorToastWithProgress } =\r\n    useToastWithProgress();\r\n  const [validatedData, setValidatedData] = useState(null);\r\n  const [showErrorsModal, setShowErrorsModal] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState([]); // State to store validation errors\r\n  const { initializeDroppableArea, loading } = usePlantDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [assignedPlant, setAssignedPlant] = useState([]);\r\n  const [selectedFiles, setSelectedFiles] = useState(null);\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  const [CAItemDetailsTable, setCAItemDetailsTable] = useState([]);\r\n  const [isFileInputDisabled, setIsFileInputDisabled] = useState(false); // New state to disable file input\r\n  const [isCreateButtonDisabled, setIsCreateButtonDisabled] = useState(true); // New state to control button enablement\r\n  \r\n  // const [addedItem, setAddedItem] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [isRemoveMode, setIsRemoveMode] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  let securityContext1 = window.widget.getValue(\"Credentials\");\r\n  console.log(\"Security context is: \", securityContext1);\r\n\r\n  const fileInputRef = useRef(null); // Create a ref for the file input\r\n\r\n  const handleFileInputChange = (event) => {\r\n    handleFileChange(\r\n      event,\r\n      setValidationErrors,\r\n      setShowErrorsModal,\r\n      showErrorToast, // Pass toast functions\r\n      showSuccessToast,\r\n      setValidatedData,\r\n      setSelectedFiles,\r\n      setIsCreateButtonDisabled\r\n    ).finally(() => {\r\n      setScreenLoader(false); // Hide loader after validation is complete\r\n    });\r\n    setIsFileInputDisabled(true);\r\n   // setIsCreateButtonDisabled(false); // Enable the \"Create Manufacturing CA\" button\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"OnSave is Called with the TableData\", tableData);\r\n    // Pass the current tableData to the onSave function\r\n    extractPlantData(tableData);\r\n    setScreenLoader(true);\r\n    await onSave(tableData); // Pass tableData when calling onSave\r\n  };\r\n  const handleRemove = async () => {\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Remove is clicked for Chnage Action\");\r\n      setIsRemoveMode(true); // Keeps remove mode active\r\n    } else {\r\n      console.log(\"Selected Table Rows:\", selectedTableRows);\r\n      console.log(\"handleRemove is Called with the TableData\", tableData);\r\n\r\n      if (selectedTableRows.length > 0) {\r\n        // Extract IDs or titles of selected rows\r\n        const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n        console.log(\"Selected Titles:\", selectedTitles);\r\n        const removedTitles = selectedTitles.map((title) => ({\r\n          title: title,\r\n        }));\r\n        console.log(\"Removed Titles:\", removedTitles);\r\n        const updatedTableData = tableData.filter(\r\n          (row) => !selectedTitles.includes(row.Plant)\r\n        );\r\n        console.log(\"updateTableData\", updateTableData);\r\n        if (updateTableData) {\r\n          setTableData(updatedTableData);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n        }\r\n\r\n        // // Update state\r\n\r\n        setUniqueData((prevUniquePlants) => [\r\n          ...prevUniquePlants,\r\n          ...removedTitles,\r\n        ]); // Add removed items back to uniqueData\r\n      } else {\r\n        alert(\"Please select at least one row to remove.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // NEED TO WORK HERE FOR THE UNIQUE PLANTS FOR CA\r\n\r\n  const handleRemovePlant = useCallback(\r\n    (itemId, plantId) => {\r\n      setCAItemDetailsTable((tableData) =>\r\n        tableData.map((item) =>\r\n          item.ItemId === itemId\r\n            ? {\r\n                ...item,\r\n                ItemPlants: item.ItemPlants.filter(\r\n                  (plant) => plant.PlantID !== plantId\r\n                ),\r\n              }\r\n            : item\r\n        )\r\n      );\r\n    },\r\n    [setCAItemDetailsTable]\r\n  );\r\n  const handleAdded = (data) => {\r\n    console.log(\"Data Received\", data);\r\n    console.log(\"[Plant Assignment] Table data\", tableData);\r\n    console.log(\"Added Data from Toolbar\", data);\r\n    console.log(\"CA Table data is\", CAItemDetails);\r\n\r\n    setTableKey((prevKey) => prevKey + 1); // Update table key\r\n\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Change Action Plant is Added\");\r\n\r\n      setCAItemDetailsTable((prev) => {\r\n        return prev.map((row) => {\r\n          const shouldUpdate =\r\n            selectedTableRows.length === 0 ||\r\n            selectedTableRows.some((r) => r.ItemId === row.ItemId);\r\n\r\n          if (!shouldUpdate) return row;\r\n\r\n          const reduxRow = CAItemDetails.find((r) => r.ItemId === row.ItemId);\r\n          const reduxPlants = reduxRow?.ItemPlants || [];\r\n          const existingPlants = row.ItemPlants || [];\r\n\r\n          const updatedExistingPlants = existingPlants.map((ep) => {\r\n            const shouldUpdateColor =\r\n              isMFGCA &&\r\n              data.includes(ep.PlantName.trim()) &&\r\n              reduxPlants.some(\r\n                (rp) => rp.PlantName.trim() === ep.PlantName.trim()\r\n              );\r\n\r\n            return shouldUpdateColor ? { ...ep, color: \"red\" } : ep;\r\n          });\r\n\r\n          const newPlantsToAdd = [];\r\n\r\n          data.forEach((plantName) => {\r\n            const matchedPlant = CAAllPlants.find((plant) => {\r\n              const formattedTitle = plant.title\r\n                .replace(/^Plant\\s+/, \"\")\r\n                .trim();\r\n              return formattedTitle === plantName.trim();\r\n            });\r\n\r\n            if (!matchedPlant) return;\r\n\r\n            const existsInRedux = reduxPlants.some(\r\n              (rp) => rp.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            const existsInTable = existingPlants.some(\r\n              (ep) => ep.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            if (!existsInTable) {\r\n              newPlantsToAdd.push({\r\n                PlantName: plantName,\r\n                PlantID: matchedPlant.id,\r\n                ...(isMFGCA && { color: existsInRedux ? \"red\" : \"green\" }),\r\n              });\r\n            }\r\n          });\r\n\r\n          return {\r\n            ...row,\r\n            ItemPlants: [...updatedExistingPlants, ...newPlantsToAdd],\r\n          };\r\n        });\r\n      });\r\n    } else {\r\n      setTableData((prev) => [\r\n        ...data.map(({ title, ...rest }) => ({ Plant: title, ...rest })),\r\n        ...prev,\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const handleUnique = (data) => {\r\n    console.log(\"The data received from Child is:\", data);\r\n    const updatedTableData = uniqueTableData.filter(\r\n      (row) =>\r\n        !data.find((selectedRow) => selectedRow === row[\"Available Plant\"])\r\n    );\r\n    console.log(\"Updated Table Data after unique:\", updatedTableData);\r\n    if (updatedTableData) {\r\n      const transformedData = updatedTableData.map((item) => ({\r\n        title: item[\"Available Plant\"],\r\n      }));\r\n\r\n      console.log(transformedData);\r\n      setUniqueData(transformedData);\r\n    }\r\n  };\r\n\r\n  // Add this function near the top of the file\r\n  const extractPlantData = (tableData) => {\r\n    const plantData = tableData.map((row) => ({\r\n      itemName: row.ItemName, // Replace with the actual key for Item Name\r\n      plantName: row.Plant, // Replace with the actual key for Plant Name\r\n    }));\r\n    console.log(\"Extracted Plant Data:\", plantData);\r\n    return plantData;\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  // Getting the CA dETAILS FROM rEDUX\r\n\r\n  const CAItemDetails = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAItemDetails\r\n  );\r\n  console.log(\"The CA Item Details are:\", CAItemDetails);\r\n\r\n  const CAAllPlants = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAallPlants\r\n  );\r\n  console.log(\"For CA all Plants are: \", CAAllPlants);\r\n  const CAHeaders = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAheaders\r\n  );\r\n  console.log(\"caheaders plant assign\", CAHeaders);\r\n\r\n  const isMFGCA = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAisMFGCA\r\n  );\r\n  console.log(\"isMFGCA value is:\", isMFGCA);\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const allPlants = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.allPlants\r\n  );\r\n  console.log(\"[PlantAssignment] plant object data: \", allPlants);\r\n\r\n  // const handleFileInputChange = (event) => {\r\n  //   handleFileChange(event, allPlants, CAHeaders, setValidationErrors, setShowErrorsModal);\r\n  // };\r\n\r\n  const uniquePlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.uniquePlants\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Plants:\", uniquePlant);\r\n\r\n  const asignedPlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.initialAssignedPlants\r\n  );\r\n  console.log(\"The Assigned Plants are:\", asignedPlant);\r\n  const productChildren = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.productChildren\r\n  );\r\n  console.log(\"[Plant Assignment] Product Children:\", productChildren);\r\n  const CAName = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAName\r\n  );\r\n  console.log(\"[plant Assignment] CAName:\", CAName);\r\n\r\n  const headers = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.headers\r\n  );\r\n  console.log(\"[Plant Assignment] Headers are: \", headers);\r\n\r\n  const getUniquePlant = useCallback(() => {\r\n    let allPlants = CAAllPlants.map((item) =>\r\n      item.title.replace(/^Plant /, \"\")\r\n    );\r\n\r\n    const sourceData =\r\n      selectedTableRows.length === 0 ? tableData : selectedTableRows;\r\n\r\n    let assignedTablePlants = [\r\n      ...new Set(\r\n        sourceData.flatMap((item) => item.Plant?.map((p) => p.PlantName) || [])\r\n      ),\r\n    ];\r\n\r\n    let uniqueTablePlants = allPlants\r\n      .filter((plant) => !assignedTablePlants.includes(plant))\r\n      .map((plant) => ({ title: plant }));\r\n\r\n    console.log(\"Unique table plants are :\", uniqueTablePlants);\r\n\r\n    // Return allPlants if isMFGCA is true, else return uniqueTablePlants\r\n    return isMFGCA\r\n      ? allPlants.map((plant) => ({ title: plant }))\r\n      : uniqueTablePlants;\r\n  }, [CAAllPlants, tableData, selectedTableRows, isMFGCA]); // Added isMFGCA as a dependency\r\n\r\n  // Updated: Function to update table data when dropdown changes\r\n  const updateTableData = (updatedData) => {\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  console.log(\"Tanble Data is:\", tableData);\r\n  // Trigger re-render of ReusableTable by changing the key\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  const [dupInitialAssignedClasses, setDupInitialAssignedClasses] =\r\n    useState(asignedPlant);\r\n  console.log(\r\n    \"Duplicate Initial Assigned Classes are:\",\r\n    dupInitialAssignedClasses\r\n  );\r\n  useEffect(() => {\r\n    setDupInitialAssignedClasses(asignedPlant);\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable(CAItemDetails);\r\n    } else {\r\n      setAssignedPlant(asignedPlant);\r\n    }\r\n  }, [asignedPlant, type, CAItemDetails]);\r\n  useEffect(() => {\r\n    if (type === \"Change Action\") {\r\n      setUniqueData(getUniquePlant());\r\n    } else {\r\n      setUniqueData(uniquePlant);\r\n    }\r\n  }, [getUniquePlant, uniquePlant, type]);\r\n  const onSave = async (tableData) => {\r\n    let updatedItems = {};\r\n    // let DupInitialAssignedClasses = [...asignedPlant]; // Clone the initial array to avoid direct mutation\r\n    const classesToBeClassified = [];\r\n\r\n    console.log(\"Table Data\", tableData);\r\n    console.log(\"Before DupInitialAssignedClasses:\", dupInitialAssignedClasses);\r\n    let finalArray = [];\r\n    // Create a new array with updated classes instead of mutating\r\n    let updatedAssignedClasses = dupInitialAssignedClasses.map((intclass) => {\r\n      let updatedClass = { ...intclass }; // Shallow clone to avoid modifying the original object\r\n\r\n      tableData.forEach((tableItem) => {\r\n        let finalObj = {};\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (updatedClass.title === tableItem.Plant) {\r\n          const MBOMValue = updatedClass.MBOM ? \"Make\" : \"Buy\";\r\n\r\n          // Update only if MBOMValue has changed\r\n          if (MBOMValue !== tableItem.MBom) {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            }\r\n            updatedClass.MBOM = tableItem.MBom === \"Make\"; // Modify the cloned object\r\n            finalObj = {\r\n              ...finalObj,\r\n              id: classid,\r\n              title: tableItem.Plant,\r\n              Type: \"Update\",\r\n            };\r\n            finalArray.push(finalObj);\r\n          }\r\n        }\r\n      });\r\n      return updatedClass; // Return updated or unchanged class object\r\n    });\r\n\r\n    // Find additional rows to classify\r\n    tableData.forEach((tableItem) => {\r\n      const matchedClass = dupInitialAssignedClasses.find(\r\n        (initialClass) => initialClass.title === tableItem.Plant\r\n      );\r\n\r\n      if (!matchedClass) {\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (classid) {\r\n          let classObject = { id: classid, title: tableItem.Plant };\r\n          let finalObj = {};\r\n          classesToBeClassified.push(classid);\r\n\r\n          if (tableItem.MBom === \"Make\") {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = true;\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = true;\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n            }\r\n            classObject.MBOM = true;\r\n            finalObj.MBOMValue = true;\r\n          } else {\r\n            classObject.MBOM = false;\r\n            finalObj.MBOMValue = false;\r\n          }\r\n\r\n          updatedAssignedClasses.push(classObject);\r\n          finalObj = {\r\n            ...finalObj,\r\n            id: classid,\r\n            title: tableItem.Plant,\r\n            Type: \"New\",\r\n          };\r\n          finalArray.push(finalObj);\r\n        }\r\n      }\r\n    });\r\n    //---------------\r\n    let rowstoDelete = [];\r\n    dupInitialAssignedClasses.forEach((initialClass) => {\r\n      const isNotInTableData = !tableData.some(\r\n        (tableItem) => tableItem.Plant === initialClass.title\r\n      );\r\n      if (isNotInTableData) {\r\n        const classid = allPlants.find(\r\n          (classItem) => classItem.title === initialClass.title\r\n        )?.id;\r\n        if (classid) {\r\n          rowstoDelete.push(classid);\r\n        }\r\n      }\r\n    });\r\n\r\n    updatedAssignedClasses = updatedAssignedClasses.filter(\r\n      (classItem) => !rowstoDelete.includes(classItem.id)\r\n    );\r\n\r\n    console.log(\"Rows getting deleted rowstoDelete:\", rowstoDelete);\r\n    //Need to pass this is savetable function\r\n    //---------------\r\n\r\n    console.log(\"After DupInitialAssignedClasses:\", updatedAssignedClasses);\r\n    console.log(\"Classes to be Classified:\", classesToBeClassified);\r\n    console.log(\"Updated Items:\", updatedItems);\r\n    console.log();\r\n\r\n    // Call services with updated data\r\n    const result = await saveData(\r\n      updatedItems,\r\n      classesToBeClassified,\r\n      updatedAssignedClasses,\r\n      headers,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      allPlants,\r\n      productChildren,\r\n      type,\r\n      rowstoDelete,\r\n      finalArray,\r\n      proposedChanges\r\n    );\r\n\r\n    if (result.success) {\r\n      setScreenLoader(false);\r\n      console.log(\"Save result:\", result);\r\n      if (result.Finalmessage === \"\" || result.Finalmessage == null) {\r\n        showSuccessToast(MSG_SAVE_SUCCESS);\r\n      } else {\r\n        // Usage\r\n        showErrorToast(formattedFinalMessage(result.Finalmessage), {\r\n          autoClose: false,\r\n          closeOnClick: false,\r\n        });\r\n      }\r\n      let finalobj = [];\r\n      if (result.ErrorObj && Object.keys(result.ErrorObj).length > 0) {\r\n        let response = processErrorObj(\r\n          result.ErrorObj,\r\n          assignedPlant,\r\n          updatedAssignedClasses,\r\n          uniquePlant\r\n        );\r\n        console.log(\"response is \", response);\r\n        if (response) {\r\n          setUniqueData(response.uniquePlant);\r\n          //setAssignedPlant(response.assignedPlant);\r\n          finalobj = response.updatedAssignedClasses;\r\n        }\r\n      } else {\r\n        finalobj = updatedAssignedClasses;\r\n      }\r\n\r\n      if (finalobj) {\r\n        // change format of final object as the asignedPlant\r\n        setAssignedPlant(finalobj);\r\n        setDupInitialAssignedClasses(finalobj);\r\n      }\r\n    } else {\r\n      setScreenLoader(false);\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n    }\r\n\r\n    // showSuccessToast(MSG_SAVE_SUCCESS);\r\n    // alert(\"Save action triggered. Check console for details.\");\r\n  };\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(() => {\r\n    return type === \"Change Action\"\r\n      ? getTableData(CAItemDetailsTable, type)\r\n      : getTableData(assignedPlant, type);\r\n  }, [CAItemDetailsTable, assignedPlant, type]);\r\n\r\n  const uniqueTableData = useMemo(\r\n    () => getUniqueTableData(uniqueData),\r\n    [uniqueData]\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Table Data:\", uniqueTableData);\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  // Define columns for the table\r\n  const columns = useMemo(\r\n    () => tableColumns(CAName, type, isRemoveMode, handleRemovePlant),\r\n    [CAName, type, isRemoveMode, handleRemovePlant]\r\n  );\r\n\r\n  const uniqueColumn = useMemo(() => uniqueColumns, []);\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    // dispatch(false);\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n      })\r\n    );\r\n\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"[PlantAssignment] State Changes:\", {\r\n      loading,\r\n      loadingParentDetails,\r\n      isDropped,\r\n    });\r\n  }, [loading, loadingParentDetails, isDropped]);\r\n\r\n  const handleReset = () => {\r\n    // Reset all states related to file upload\r\n    setValidatedData(null);\r\n    setSelectedFiles(null);\r\n    setValidationErrors([]);\r\n    setShowErrorsModal(false);\r\n\r\n    // Re-enable the file input\r\n    setIsFileInputDisabled(false);\r\n\r\n    // Clear the file input value using the ref\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = \"\"; // Reset the file input value\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button\r\n    setIsCreateButtonDisabled(true);\r\n\r\n    // Optionally show a toast message\r\n    showSuccessToast(\"File upload has been reset.\");\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n\r\n    if (!validatedData) {\r\n      showErrorToast(\"Please upload and validate a file before proceeding.\");\r\n      return;\r\n    }\r\n\r\n    setScreenLoader(true); // Show loader when the process starts\r\n\r\n    // const CAHeaders = await fetchCsrfToken(); // Fetch headers\r\n    try {\r\n      await processManufacturingCA(\r\n        validatedData,\r\n        showSuccessToastWithProgress,\r\n        showErrorToastWithProgress\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error in handleSubmit:\", error);\r\n    } finally {\r\n      setScreenLoader(false); // Hide loader after the process is complete\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button after submission\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {screenLoader && <Loader />}\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && (\r\n        <div\r\n          style={{\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n            position: \"relative\",\r\n          }}\r\n        >\r\n          <DragAndDropComponent />\r\n\r\n          {/* File Input & Submit Button Positioned at Bottom Center */}\r\n          <div\r\n            style={{\r\n              padding: \"0px 0px 10px 0px\",\r\n              position: \"absolute\",\r\n              bottom: \"10px\", // Adjust as needed\r\n              left: \"50%\",\r\n              transform: \"translateX(-50%)\",\r\n              zIndex: 10,\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <Button\r\n              variant=\"outline-primary\"\r\n              onClick={() => {\r\n                const link = document.createElement(\"a\");\r\n                link.href =\r\n                  \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\"; // Use the raw file URL for direct download\r\n                link.download = \"plant_assignment_template.xlsx\"; // Set the file name for the download\r\n                link.click();\r\n              }}\r\n            >\r\n              Download Template\r\n            </Button>\r\n\r\n            <Form.Group controlId=\"formFileMultiple\">\r\n              <Form.Control\r\n                type=\"file\"\r\n                multiple\r\n                onChange={handleFileInputChange}\r\n                disabled={isFileInputDisabled}\r\n                ref={fileInputRef} // Attach the ref to the file input\r\n              />\r\n            </Form.Group>\r\n            <Button variant=\"outline-danger\" onClick={handleReset}>\r\n              <FontAwesomeIcon icon={faRotateLeft} />\r\n            </Button>\r\n\r\n            <div\r\n              style={{\r\n                display: \"inline-block\",\r\n                cursor: isCreateButtonDisabled ? \"not-allowed\" : \"pointer\", // Apply cursor style to the wrapper div\r\n              }}\r\n            >\r\n              <Button\r\n                variant=\"outline-primary\"\r\n                onClick={handleSubmit}\r\n                disabled={isCreateButtonDisabled} // Disable the button\r\n              >\r\n                Create Manufacturing CA\r\n              </Button>\r\n            </div>\r\n\r\n            {/* <Button variant=\"outline-primary\" onClick={handleReset}>\r\n              Reset\r\n            </Button> */}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n          {/* Show initial loader when loading is true */}\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && <CardWithDragAndDrop data={cardData} />}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <PlantAssignmentToolbarNativeCta\r\n                  uniquedata={uniqueTableData}\r\n                  uniqueColumn={uniqueColumn}\r\n                  CAName={CAName}\r\n                  onAddPlant={handleAdded}\r\n                  addedPlant={handleUnique}\r\n                  onSave={handleSave}\r\n                  onRemove={handleRemove}\r\n                  state={state}\r\n                  type={type}\r\n                  isMFGCA={isMFGCA}\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  meta={{ updateTableData }}\r\n                  widgetType=\"Plant_Assignment_Widget\"\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      {/* Show validation errors in ErrorDisplayTable\r\n       {validationErrors.length > 0 && (\r\n              <ErrorDisplayTable errors={validationErrors} />\r\n            )} */}\r\n      {/* Show validation errors in ContentErrorsModal */}\r\n      <ContentErrorsModal\r\n        show={showErrorsModal}\r\n        onHide={() => setShowErrorsModal(false)}\r\n        errors={validationErrors}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignment;\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport PlantAssignment from \"./plantAssignment\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <PlantAssignment />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n"],"names":["_ref","variant","message","show","className","_jsx","Alert","children","onHide","title","footerButtons","_jsxs","Modal","size","centered","Header","closeButton","Title","Body","Footer","map","btn","index","Button","onClick","label","errors","processedErrors","useMemo","errorGroups","reduce","groups","error","rowMatch","match","columnMatch","errorMsg","split","slice","join","rowNumber","columnName","includes","columns","push","Object","values","sort","a","b","Number","cache","CellMeasurerCache","fixedWidth","defaultHeight","rowRenderer","_ref2","key","style","parent","CellMeasurer","columnIndex","rowIndex","width","column","i","err","ReusableAlert","_Fragment","length","AutoSizer","_ref3","height","List","rowCount","rowHeight","deferredMeasurementCache","console","log","CustomModal","ErrorPopup","usePlantDropableArea","showErrorToast","useToast","handlePlantAssignment","usePlantAssignment","isDropped","useSelector","state","droppedObject","loading","dispatch","useDispatch","fetchObjectDetails","useCallback","async","objectDetailsResult","getDroppedObjectDetails","dataItems","success","setDroppedObjectData","cardData","data","draggedObjectData","_dataItems$","_dataItems$2","setIsDroppedAction","objectId","objectType","MSG_FETCH_OBJECT_DETAILS_FAILED","setLoading","handleDrop","_dataItems$3","MSG_INVALID_OBJECT_TYPE","setTimeout","warn","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","WidgetLifecycle","showSuccessToast","useState","useEffect","window","widget","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","userClickedRefresh","sessionStorage","getItem","some","line","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","droppedObjectData","initialDraggedData","items","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","Loader","PlantRenderer","plants","itemId","isRemoveMode","handleRemovePlant","plant","marginRight","display","alignItems","color","fontWeight","PlantName","AiOutlineClose","cursor","marginLeft","PlantID","getTableData","tableData","type","ItemName","ItemTitle","Plant","ItemPlants","ItemId","Seq","Status","MFGChange","MFGStatus","Change","ChangeStatus","OracleTemplate","MBom","MBOM","uniqueColumns","accessorKey","header","onAddPlant","addedPlant","onSave","onRemove","uniquedata","uniqueColumn","CAName","isMFGCA","showWarningToast","addPlantPopup","setAddPlantPopup","availablePlantRef","useRef","MSG_ADDPRODUCT_RELEASED_ERROR","MSG_ADDPRODUCT_NOT_ALLOWED_ERROR","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","handleRemove","_availablePlantRef$cu","current","addPlant","AvailablePlant","ref","addedItem","newItems","DragAndDropComponent","performSearch","useInterComSearch","Image","src","alt","SearchInput","onSearch","searchText","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","id","callManufacturingCAApi","response","url","body","arguments","undefined","method","JSON","stringify","axios","headers","fetchData","processManufacturingCA","validatedData","showSuccessToastWithProgress","showErrorToastWithProgress","csrfTokenHeaders","fetchCsrfToken","CAHeaders","_objectSpread","credentials","getValue","credentialsParts","companyName","collabSpace","allPlantsData","getAllPlants","manufacturingCABody","excelData","uniquePlantTitles","Set","row","itemName","toString","trim","plantsList","p","name","forEach","add","parentPlants","plantTitle","matchedPlant","find","replace","CATitle","CAOrganization","CACollabSpace","CAOwner","Items","ParentPlants","createManufacturingCABody","concat","PlantAssignment","useToastWithProgress","setValidatedData","showErrorsModal","setShowErrorsModal","validationErrors","setValidationErrors","tableKey","setTableKey","setTableData","assignedPlant","setAssignedPlant","selectedFiles","setSelectedFiles","uniqueData","setUniqueData","CAItemDetailsTable","setCAItemDetailsTable","isFileInputDisabled","setIsFileInputDisabled","isCreateButtonDisabled","setIsCreateButtonDisabled","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","setIsRemoveMode","securityContext1","fileInputRef","plantId","item","filter","extractPlantData","plantData","plantName","selectedTableRows","CAItemDetails","CAItemObjectDetails","CAAllPlants","CAallPlants","CAheaders","CAisMFGCA","loadingParentDetails","proposedChanges","plantObjectData","allPlants","uniquePlant","uniquePlants","asignedPlant","initialAssignedPlants","productChildren","getUniquePlant","sourceData","assignedTablePlants","flatMap","_item$Plant","uniqueTablePlants","updateTableData","updatedData","prevKey","_droppedObjectData$in","_droppedObjectData$in2","dupInitialAssignedClasses","setDupInitialAssignedClasses","_droppedObjectData$in3","_droppedObjectData$in4","updatedItems","classesToBeClassified","finalArray","updatedAssignedClasses","intclass","updatedClass","tableItem","_allPlants$find","finalObj","classid","classitem","test","MBOMName","MBOMValue","Type","initialClass","_allPlants$find2","classObject","rowstoDelete","_allPlants$find3","classItem","result","saveData","Finalmessage","MSG_SAVE_SUCCESS","finalMessage","messageList","msg","userSelect","position","paddingRight","handleCopy","textToCopy","navigator","clipboard","writeText","right","top","background","border","fontSize","FaRegCopy","formattedFinalMessage","autoClose","closeOnClick","finalobj","ErrorObj","keys","errorObj","processErrorObj","MSG_SAVE_FAILURE","newTableData","uniqueTableData","getUniqueTableData","owner","Owner","Description","imageURL","EIN","getCardData","tableColumns","cell","original","table","value","onChange","e","_table$options$meta","updatedValue","target","getRowModel","rows","r","options","meta","disabled","appearance","padding","textAlign","onMouseOver","onMouseOut","flexDirection","justifyContent","bottom","left","transform","zIndex","gap","link","createElement","href","download","click","Form","Group","controlId","Control","multiple","event","files","validExtensions","Array","from","file","toLowerCase","endsWith","reader","FileReader","onload","Uint8Array","workbook","XLSX","sheetName","SheetNames","sheet","Sheets","jsonData","sheet_to_json","normalizedHeaders","errorDescription","formattedErrors","onerror","readAsArrayBuffer","handleFileChange","finally","handleReset","FontAwesomeIcon","icon","faRotateLeft","handleHomeClick","setIsDropped","parentDetails","versions","setPlantObjectData","CardWithDragAndDrop","PlantAssignmentToolbarNativeCta","prev","reduxRow","reduxPlants","existingPlants","updatedExistingPlants","ep","rp","newPlantsToAdd","existsInRedux","rest","_objectWithoutProperties","_excluded","updatedTableData","selectedRow","transformedData","selectedTitles","removedTitles","prevUniquePlants","alert","ReusableTable","widgetType","ContentErrorsModal","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","getElementById","appendChild","ReactDOM","render","Provider","ToastContainer","start","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}